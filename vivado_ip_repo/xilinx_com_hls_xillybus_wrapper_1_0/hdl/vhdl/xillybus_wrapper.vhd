-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.1
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity xillybus_wrapper is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    in_r_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    in_r_empty_n : IN STD_LOGIC;
    in_r_read : OUT STD_LOGIC;
    out_r_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_r_full_n : IN STD_LOGIC;
    out_r_write : OUT STD_LOGIC;
    debug_ready : IN STD_LOGIC_VECTOR (7 downto 0);
    debug_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    debug_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of xillybus_wrapper is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "xillybus_wrapper,hls_ip_2014_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485tffg1761-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.390000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv17_10000 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";

    signal p_str3_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_str3_ce0 : STD_LOGIC;
    signal p_str3_q0 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal tmp_i_fu_100_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_reg_146 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_rec_i_fu_106_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_rec_i_reg_150 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_str3_load_cast_fu_112_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_str3_load_cast_reg_155 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_rec_fu_135_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal exitcond2_fu_129_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_49 : BOOLEAN;
    signal p_0_rec_i_reg_72 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_120_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_0_rec_reg_83 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_0_rec_i_cast_fu_95_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);

    component xillybus_wrapper_p_str3 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;



begin
    p_str3_U : component xillybus_wrapper_p_str3
    generic map (
        DataWidth => 7,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_str3_address0,
        ce0 => p_str3_ce0,
        q0 => p_str3_q0);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- p_0_rec_i_reg_72 assign process. --
    p_0_rec_i_reg_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st4_fsm_3 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_fu_120_p1)))) then 
                p_0_rec_i_reg_72 <= p_rec_i_reg_150;
            elsif ((ap_ST_st1_fsm_0 = ap_CS_fsm)) then 
                p_0_rec_i_reg_72 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- p_0_rec_reg_83 assign process. --
    p_0_rec_reg_83_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((tmp_i_reg_146 = ap_const_lv1_0)))) then 
                p_0_rec_reg_83 <= ap_const_lv17_0;
            elsif (((ap_ST_st5_fsm_4 = ap_CS_fsm) and (exitcond2_fu_129_p2 = ap_const_lv1_0) and not(ap_sig_bdd_49))) then 
                p_0_rec_reg_83 <= p_rec_fu_135_p2;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then
                p_rec_i_reg_150 <= p_rec_i_fu_106_p2;
                tmp_i_reg_146 <= tmp_i_fu_100_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then
                p_str3_load_cast_reg_155(0) <= p_str3_load_cast_fu_112_p1(0);
    p_str3_load_cast_reg_155(1) <= p_str3_load_cast_fu_112_p1(1);
    p_str3_load_cast_reg_155(2) <= p_str3_load_cast_fu_112_p1(2);
    p_str3_load_cast_reg_155(3) <= p_str3_load_cast_fu_112_p1(3);
    p_str3_load_cast_reg_155(4) <= p_str3_load_cast_fu_112_p1(4);
    p_str3_load_cast_reg_155(5) <= p_str3_load_cast_fu_112_p1(5);
    p_str3_load_cast_reg_155(6) <= p_str3_load_cast_fu_112_p1(6);
            end if;
        end if;
    end process;
    p_str3_load_cast_reg_155(7) <= '0';

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm , tmp_i_reg_146 , exitcond2_fu_129_p2 , ap_sig_bdd_49 , tmp_fu_120_p1)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                if (not((tmp_i_reg_146 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                if (not((ap_const_lv1_0 = tmp_fu_120_p1))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st5_fsm_4 => 
                if ((not(ap_sig_bdd_49) and not((exitcond2_fu_129_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                elsif (((exitcond2_fu_129_p2 = ap_const_lv1_0) and not(ap_sig_bdd_49))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    -- ap_sig_bdd_49 assign process. --
    ap_sig_bdd_49_assign_proc : process(out_r_full_n, exitcond2_fu_129_p2)
    begin
                ap_sig_bdd_49 <= ((out_r_full_n = ap_const_logic_0) and (exitcond2_fu_129_p2 = ap_const_lv1_0));
    end process;

    debug_out <= p_str3_load_cast_reg_155;

    -- debug_out_ap_vld assign process. --
    debug_out_ap_vld_assign_proc : process(ap_CS_fsm, tmp_fu_120_p1)
    begin
        if (((ap_ST_st4_fsm_3 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_fu_120_p1)))) then 
            debug_out_ap_vld <= ap_const_logic_1;
        else 
            debug_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    exitcond2_fu_129_p2 <= "1" when (p_0_rec_reg_83 = ap_const_lv17_10000) else "0";
    in_r_read <= ap_const_logic_0;
    out_r_din <= ap_const_lv32_3;

    -- out_r_write assign process. --
    out_r_write_assign_proc : process(ap_CS_fsm, exitcond2_fu_129_p2, ap_sig_bdd_49)
    begin
        if (((ap_ST_st5_fsm_4 = ap_CS_fsm) and (exitcond2_fu_129_p2 = ap_const_lv1_0) and not(ap_sig_bdd_49))) then 
            out_r_write <= ap_const_logic_1;
        else 
            out_r_write <= ap_const_logic_0;
        end if; 
    end process;

    p_0_rec_i_cast_fu_95_p1 <= std_logic_vector(resize(unsigned(p_0_rec_i_reg_72),64));
    p_rec_fu_135_p2 <= std_logic_vector(unsigned(p_0_rec_reg_83) + unsigned(ap_const_lv17_1));
    p_rec_i_fu_106_p2 <= std_logic_vector(unsigned(p_0_rec_i_reg_72) + unsigned(ap_const_lv4_1));
    p_str3_address0 <= p_0_rec_i_cast_fu_95_p1(4 - 1 downto 0);

    -- p_str3_ce0 assign process. --
    p_str3_ce0_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            p_str3_ce0 <= ap_const_logic_1;
        else 
            p_str3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_str3_load_cast_fu_112_p1 <= std_logic_vector(resize(unsigned(p_str3_q0),8));
    tmp_fu_120_p1 <= debug_ready(1 - 1 downto 0);
    tmp_i_fu_100_p2 <= "1" when (p_0_rec_i_reg_72 = ap_const_lv4_D) else "0";
end behav;
