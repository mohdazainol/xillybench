// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.1
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="xillybus_wrapper,hls_ip_2014_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485tffg1761-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.052000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}" *)

module xillybus_wrapper (
        ap_clk,
        ap_rst,
        in_r_dout,
        in_r_empty_n,
        in_r_read,
        out_r_din,
        out_r_full_n,
        out_r_write,
        debug_ready,
        debug_out,
        debug_out_ap_vld
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 3'b000;
parameter    ap_ST_st2_fsm_1 = 3'b1;
parameter    ap_ST_st3_fsm_2 = 3'b10;
parameter    ap_ST_st4_fsm_3 = 3'b11;
parameter    ap_ST_st5_fsm_4 = 3'b100;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv17_0 = 17'b00000000000000000;
parameter    ap_const_lv4_D = 4'b1101;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv17_10000 = 17'b10000000000000000;
parameter    ap_const_lv17_1 = 17'b1;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input  [31:0] in_r_dout;
input   in_r_empty_n;
output   in_r_read;
output  [31:0] out_r_din;
input   out_r_full_n;
output   out_r_write;
input  [7:0] debug_ready;
output  [7:0] debug_out;
output   debug_out_ap_vld;

reg in_r_read;
reg out_r_write;
reg debug_out_ap_vld;
wire   [3:0] p_str3_address0;
reg    p_str3_ce0;
wire   [6:0] p_str3_q0;
reg   [2:0] ap_CS_fsm = 3'b000;
wire   [0:0] tmp_i_fu_106_p2;
reg   [0:0] tmp_i_reg_152;
wire   [3:0] p_rec_i_fu_112_p2;
reg   [3:0] p_rec_i_reg_156;
wire   [7:0] p_str3_load_cast_fu_118_p1;
reg   [7:0] p_str3_load_cast_reg_161;
wire   [16:0] p_rec_fu_141_p2;
wire   [0:0] exitcond2_fu_135_p2;
reg    ap_sig_bdd_52;
reg   [3:0] p_0_rec_i_reg_78;
wire   [0:0] tmp_1_fu_126_p1;
reg   [16:0] p_01_rec_reg_89;
wire   [63:0] p_0_rec_i_cast_fu_101_p1;
reg   [2:0] ap_NS_fsm;


xillybus_wrapper_p_str3 #(
    .DataWidth( 7 ),
    .AddressRange( 14 ),
    .AddressWidth( 4 ))
p_str3_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( p_str3_address0 ),
    .ce0( p_str3_ce0 ),
    .q0( p_str3_q0 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & ~(tmp_i_reg_152 == ap_const_lv1_0))) begin
        p_01_rec_reg_89 <= ap_const_lv17_0;
    end else if (((ap_ST_st5_fsm_4 == ap_CS_fsm) & (exitcond2_fu_135_p2 == ap_const_lv1_0) & ~ap_sig_bdd_52)) begin
        p_01_rec_reg_89 <= p_rec_fu_141_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st4_fsm_3 == ap_CS_fsm) & ~(ap_const_lv1_0 == tmp_1_fu_126_p1))) begin
        p_0_rec_i_reg_78 <= p_rec_i_reg_156;
    end else if ((ap_ST_st1_fsm_0 == ap_CS_fsm)) begin
        p_0_rec_i_reg_78 <= ap_const_lv4_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
        p_rec_i_reg_156 <= p_rec_i_fu_112_p2;
        tmp_i_reg_152 <= tmp_i_fu_106_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
        p_str3_load_cast_reg_161[0] <= p_str3_load_cast_fu_118_p1[0];
p_str3_load_cast_reg_161[1] <= p_str3_load_cast_fu_118_p1[1];
p_str3_load_cast_reg_161[2] <= p_str3_load_cast_fu_118_p1[2];
p_str3_load_cast_reg_161[3] <= p_str3_load_cast_fu_118_p1[3];
p_str3_load_cast_reg_161[4] <= p_str3_load_cast_fu_118_p1[4];
p_str3_load_cast_reg_161[5] <= p_str3_load_cast_fu_118_p1[5];
p_str3_load_cast_reg_161[6] <= p_str3_load_cast_fu_118_p1[6];
    end
end

/// debug_out_ap_vld assign process. ///
always @ (ap_CS_fsm or tmp_1_fu_126_p1)
begin
    if (((ap_ST_st4_fsm_3 == ap_CS_fsm) & ~(ap_const_lv1_0 == tmp_1_fu_126_p1))) begin
        debug_out_ap_vld = ap_const_logic_1;
    end else begin
        debug_out_ap_vld = ap_const_logic_0;
    end
end

/// in_r_read assign process. ///
always @ (ap_CS_fsm or exitcond2_fu_135_p2 or ap_sig_bdd_52)
begin
    if (((ap_ST_st5_fsm_4 == ap_CS_fsm) & (exitcond2_fu_135_p2 == ap_const_lv1_0) & ~ap_sig_bdd_52)) begin
        in_r_read = ap_const_logic_1;
    end else begin
        in_r_read = ap_const_logic_0;
    end
end

/// out_r_write assign process. ///
always @ (ap_CS_fsm or exitcond2_fu_135_p2 or ap_sig_bdd_52)
begin
    if (((ap_ST_st5_fsm_4 == ap_CS_fsm) & (exitcond2_fu_135_p2 == ap_const_lv1_0) & ~ap_sig_bdd_52)) begin
        out_r_write = ap_const_logic_1;
    end else begin
        out_r_write = ap_const_logic_0;
    end
end

/// p_str3_ce0 assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
        p_str3_ce0 = ap_const_logic_1;
    end else begin
        p_str3_ce0 = ap_const_logic_0;
    end
end
always @ (ap_CS_fsm or tmp_i_reg_152 or exitcond2_fu_135_p2 or ap_sig_bdd_52 or tmp_1_fu_126_p1)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
            ap_NS_fsm = ap_ST_st2_fsm_1;
        ap_ST_st2_fsm_1 : 
            ap_NS_fsm = ap_ST_st3_fsm_2;
        ap_ST_st3_fsm_2 : 
            if (~(tmp_i_reg_152 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        ap_ST_st4_fsm_3 : 
            if (~(ap_const_lv1_0 == tmp_1_fu_126_p1)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        ap_ST_st5_fsm_4 : 
            if ((~ap_sig_bdd_52 & ~(exitcond2_fu_135_p2 == ap_const_lv1_0))) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else if (((exitcond2_fu_135_p2 == ap_const_lv1_0) & ~ap_sig_bdd_52)) begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end else begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end
        default : 
            ap_NS_fsm = 'bx;
    endcase
end

/// ap_sig_bdd_52 assign process. ///
always @ (in_r_empty_n or out_r_full_n or exitcond2_fu_135_p2)
begin
    ap_sig_bdd_52 = (((in_r_empty_n == ap_const_logic_0) & (exitcond2_fu_135_p2 == ap_const_lv1_0)) | ((exitcond2_fu_135_p2 == ap_const_lv1_0) & (out_r_full_n == ap_const_logic_0)));
end
assign debug_out = p_str3_load_cast_reg_161;
assign exitcond2_fu_135_p2 = (p_01_rec_reg_89 == ap_const_lv17_10000? 1'b1: 1'b0);
assign out_r_din = in_r_dout;
assign p_0_rec_i_cast_fu_101_p1 = $unsigned(p_0_rec_i_reg_78);
assign p_rec_fu_141_p2 = (p_01_rec_reg_89 + ap_const_lv17_1);
assign p_rec_i_fu_112_p2 = (p_0_rec_i_reg_78 + ap_const_lv4_1);
assign p_str3_address0 = p_0_rec_i_cast_fu_101_p1;
assign p_str3_load_cast_fu_118_p1 = $unsigned(p_str3_q0);
assign tmp_1_fu_126_p1 = debug_ready[0:0];
assign tmp_i_fu_106_p2 = (p_0_rec_i_reg_78 == ap_const_lv4_D? 1'b1: 1'b0);
always @ (posedge ap_clk)
begin
    p_str3_load_cast_reg_161[7] <= 1'b0;
end



endmodule //xillybus_wrapper

