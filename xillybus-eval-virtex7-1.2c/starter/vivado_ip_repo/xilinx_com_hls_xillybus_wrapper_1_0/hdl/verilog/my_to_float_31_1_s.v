// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.4
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module my_to_float_31_1_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_V,
        prescale,
        ap_return
);

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [30:0] in_V;
input  [8:0] prescale;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] ap_return;
reg   [1:0] ap_CS_fsm = 2'b00;
wire   [31:0] out_bits_0_V_fu_183_p5;
reg   [31:0] out_bits_0_V_reg_422;
wire   [31:0] p_Result_s_fu_207_p5;
reg   [31:0] p_Result_s_reg_427;
wire   [1:0] i_fu_225_p2;
wire   [31:0] c_0_1_fu_249_p3;
wire   [0:0] exitcond_fu_219_p2;
wire   [31:0] c_0_2_fu_257_p3;
wire   [1:0] i_1_fu_273_p2;
wire   [31:0] shift_2_fu_291_p2;
wire   [0:0] tmp_27_fu_265_p3;
wire   [30:0] in_shift_V_fu_344_p1;
reg   [31:0] c_0_s_reg_78;
reg   [31:0] c_1_s_reg_90;
reg   [1:0] i1_reg_102;
reg   [30:0] in_shift_reg_113;
wire   [0:0] tmp_16_fu_349_p2;
reg   [31:0] shift_reg_122;
reg   [1:0] i2_reg_133;
reg   [30:0] p_Val2_in_phi_fu_147_p4;
reg   [31:0] shift_1_phi_fu_157_p4;
wire   [15:0] p_Result_1_fu_165_p4;
wire   [16:0] tmp_fu_175_p3;
wire   [14:0] tmp_26_fu_195_p1;
wire   [15:0] tmp_2_fu_199_p3;
wire   [0:0] tmp_28_fu_231_p1;
wire   [31:0] out_bits_0_V_1_fu_235_p3;
reg   [31:0] c_1_fu_241_p3;
wire   [0:0] tmp_29_fu_279_p1;
wire   [31:0] sh_assign_fu_283_p3;
wire   [0:0] isNeg_fu_298_p3;
wire   [31:0] tmp_13_fu_306_p2;
wire   [31:0] tmp_14_fu_324_p0;
wire   [31:0] tmp_s_fu_320_p1;
wire   [31:0] sh_assign_1_fu_312_p3;
wire   [31:0] tmp_15_fu_330_p0;
wire   [31:0] tmp_14_fu_324_p2;
wire   [31:0] tmp_15_fu_330_p2;
wire   [31:0] storemerge_in_fu_336_p3;
wire   [7:0] tmp_32_fu_370_p1;
wire   [7:0] tmp_18_fu_373_p2;
wire   [7:0] tmp_33_fu_379_p1;
wire   [0:0] tmp_17_fu_365_p2;
wire   [7:0] phitmp_fu_383_p2;
wire   [7:0] out_exp_V_fu_389_p3;
wire   [22:0] p_Val2_s_fu_355_p4;
wire   [31:0] p_Result_22_fu_397_p4;
wire   [31:0] result_write_assign_fu_407_p1;
reg   [31:0] ap_return_preg = 32'b00000000000000000000000000000000;
reg   [1:0] ap_NS_fsm;
reg    ap_sig_bdd_80;
parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 2'b00;
parameter    ap_ST_st2_fsm_1 = 2'b1;
parameter    ap_ST_st3_fsm_2 = 2'b10;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_1E = 32'b11110;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv2_2 = 2'b10;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_1D = 32'b11101;
parameter    ap_const_lv31_0 = 31'b0000000000000000000000000000000;
parameter    ap_const_lv8_7F = 8'b1111111;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_true = 1'b1;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_return_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_return_preg
    if (ap_rst == 1'b1) begin
        ap_return_preg[0] <= 1'b0;
        ap_return_preg[1] <= 1'b0;
        ap_return_preg[2] <= 1'b0;
        ap_return_preg[3] <= 1'b0;
        ap_return_preg[4] <= 1'b0;
        ap_return_preg[5] <= 1'b0;
        ap_return_preg[6] <= 1'b0;
        ap_return_preg[7] <= 1'b0;
        ap_return_preg[8] <= 1'b0;
        ap_return_preg[9] <= 1'b0;
        ap_return_preg[10] <= 1'b0;
        ap_return_preg[11] <= 1'b0;
        ap_return_preg[12] <= 1'b0;
        ap_return_preg[13] <= 1'b0;
        ap_return_preg[14] <= 1'b0;
        ap_return_preg[15] <= 1'b0;
        ap_return_preg[16] <= 1'b0;
        ap_return_preg[17] <= 1'b0;
        ap_return_preg[18] <= 1'b0;
        ap_return_preg[19] <= 1'b0;
        ap_return_preg[20] <= 1'b0;
        ap_return_preg[21] <= 1'b0;
        ap_return_preg[22] <= 1'b0;
        ap_return_preg[23] <= 1'b0;
        ap_return_preg[24] <= 1'b0;
        ap_return_preg[25] <= 1'b0;
        ap_return_preg[26] <= 1'b0;
        ap_return_preg[27] <= 1'b0;
        ap_return_preg[28] <= 1'b0;
        ap_return_preg[29] <= 1'b0;
        ap_return_preg[30] <= 1'b0;
    end else begin
        if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & ((ap_const_lv1_0 == tmp_16_fu_349_p2) | ~(ap_const_lv1_0 == tmp_27_fu_265_p3)))) begin
            ap_return_preg[0] <= result_write_assign_fu_407_p1[0];
            ap_return_preg[1] <= result_write_assign_fu_407_p1[1];
            ap_return_preg[2] <= result_write_assign_fu_407_p1[2];
            ap_return_preg[3] <= result_write_assign_fu_407_p1[3];
            ap_return_preg[4] <= result_write_assign_fu_407_p1[4];
            ap_return_preg[5] <= result_write_assign_fu_407_p1[5];
            ap_return_preg[6] <= result_write_assign_fu_407_p1[6];
            ap_return_preg[7] <= result_write_assign_fu_407_p1[7];
            ap_return_preg[8] <= result_write_assign_fu_407_p1[8];
            ap_return_preg[9] <= result_write_assign_fu_407_p1[9];
            ap_return_preg[10] <= result_write_assign_fu_407_p1[10];
            ap_return_preg[11] <= result_write_assign_fu_407_p1[11];
            ap_return_preg[12] <= result_write_assign_fu_407_p1[12];
            ap_return_preg[13] <= result_write_assign_fu_407_p1[13];
            ap_return_preg[14] <= result_write_assign_fu_407_p1[14];
            ap_return_preg[15] <= result_write_assign_fu_407_p1[15];
            ap_return_preg[16] <= result_write_assign_fu_407_p1[16];
            ap_return_preg[17] <= result_write_assign_fu_407_p1[17];
            ap_return_preg[18] <= result_write_assign_fu_407_p1[18];
            ap_return_preg[19] <= result_write_assign_fu_407_p1[19];
            ap_return_preg[20] <= result_write_assign_fu_407_p1[20];
            ap_return_preg[21] <= result_write_assign_fu_407_p1[21];
            ap_return_preg[22] <= result_write_assign_fu_407_p1[22];
            ap_return_preg[23] <= result_write_assign_fu_407_p1[23];
            ap_return_preg[24] <= result_write_assign_fu_407_p1[24];
            ap_return_preg[25] <= result_write_assign_fu_407_p1[25];
            ap_return_preg[26] <= result_write_assign_fu_407_p1[26];
            ap_return_preg[27] <= result_write_assign_fu_407_p1[27];
            ap_return_preg[28] <= result_write_assign_fu_407_p1[28];
            ap_return_preg[29] <= result_write_assign_fu_407_p1[29];
            ap_return_preg[30] <= result_write_assign_fu_407_p1[30];
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & (exitcond_fu_219_p2 == ap_const_lv1_0))) begin
        i1_reg_102 <= i_fu_225_p2;
    end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0))) begin
        i1_reg_102 <= ap_const_lv2_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(exitcond_fu_219_p2 == ap_const_lv1_0))) begin
        i2_reg_133 <= ap_const_lv2_0;
    end else if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & (ap_const_lv1_0 == tmp_27_fu_265_p3) & ~(ap_const_lv1_0 == tmp_16_fu_349_p2))) begin
        i2_reg_133 <= i_1_fu_273_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(exitcond_fu_219_p2 == ap_const_lv1_0))) begin
        in_shift_reg_113 <= in_V;
    end else if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & (ap_const_lv1_0 == tmp_27_fu_265_p3) & ~(ap_const_lv1_0 == tmp_16_fu_349_p2))) begin
        in_shift_reg_113 <= in_shift_V_fu_344_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(exitcond_fu_219_p2 == ap_const_lv1_0))) begin
        shift_reg_122 <= ap_const_lv32_0;
    end else if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & (ap_const_lv1_0 == tmp_27_fu_265_p3) & ~(ap_const_lv1_0 == tmp_16_fu_349_p2))) begin
        shift_reg_122 <= shift_2_fu_291_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & (exitcond_fu_219_p2 == ap_const_lv1_0))) begin
        c_0_s_reg_78 <= c_0_1_fu_249_p3;
        c_1_s_reg_90 <= c_0_2_fu_257_p3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0))) begin
        out_bits_0_V_reg_422 <= out_bits_0_V_fu_183_p5;
        p_Result_s_reg_427 <= p_Result_s_fu_207_p5;
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_CS_fsm or tmp_27_fu_265_p3 or tmp_16_fu_349_p2)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm)) | ((ap_ST_st3_fsm_2 == ap_CS_fsm) & ((ap_const_lv1_0 == tmp_16_fu_349_p2) | ~(ap_const_lv1_0 == tmp_27_fu_265_p3))))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_CS_fsm or tmp_27_fu_265_p3 or tmp_16_fu_349_p2)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & ((ap_const_lv1_0 == tmp_16_fu_349_p2) | ~(ap_const_lv1_0 == tmp_27_fu_265_p3)))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_return assign process. ///
always @ (ap_CS_fsm or tmp_27_fu_265_p3 or tmp_16_fu_349_p2 or result_write_assign_fu_407_p1 or ap_return_preg)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & ((ap_const_lv1_0 == tmp_16_fu_349_p2) | ~(ap_const_lv1_0 == tmp_27_fu_265_p3)))) begin
        ap_return = result_write_assign_fu_407_p1;
    end else begin
        ap_return = ap_return_preg;
    end
end

/// p_Val2_in_phi_fu_147_p4 assign process. ///
always @ (ap_CS_fsm or tmp_27_fu_265_p3 or in_shift_V_fu_344_p1 or in_shift_reg_113 or ap_sig_bdd_80)
begin
    if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
        if (ap_sig_bdd_80) begin
            p_Val2_in_phi_fu_147_p4 = in_shift_V_fu_344_p1;
        end else if (~(ap_const_lv1_0 == tmp_27_fu_265_p3)) begin
            p_Val2_in_phi_fu_147_p4 = in_shift_reg_113;
        end else begin
            p_Val2_in_phi_fu_147_p4 = 'bx;
        end
    end else begin
        p_Val2_in_phi_fu_147_p4 = 'bx;
    end
end

/// shift_1_phi_fu_157_p4 assign process. ///
always @ (ap_CS_fsm or shift_2_fu_291_p2 or tmp_27_fu_265_p3 or shift_reg_122 or ap_sig_bdd_80)
begin
    if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
        if (ap_sig_bdd_80) begin
            shift_1_phi_fu_157_p4 = shift_2_fu_291_p2;
        end else if (~(ap_const_lv1_0 == tmp_27_fu_265_p3)) begin
            shift_1_phi_fu_157_p4 = shift_reg_122;
        end else begin
            shift_1_phi_fu_157_p4 = 'bx;
        end
    end else begin
        shift_1_phi_fu_157_p4 = 'bx;
    end
end
always @ (ap_start or ap_CS_fsm or exitcond_fu_219_p2 or tmp_27_fu_265_p3 or tmp_16_fu_349_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        ap_ST_st2_fsm_1 : 
            if ((exitcond_fu_219_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        ap_ST_st3_fsm_2 : 
            if (((ap_const_lv1_0 == tmp_16_fu_349_p2) | ~(ap_const_lv1_0 == tmp_27_fu_265_p3))) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        default : 
            ap_NS_fsm = 'bx;
    endcase
end

/// ap_sig_bdd_80 assign process. ///
always @ (tmp_27_fu_265_p3 or tmp_16_fu_349_p2)
begin
    ap_sig_bdd_80 = ((ap_const_lv1_0 == tmp_27_fu_265_p3) & (ap_const_lv1_0 == tmp_16_fu_349_p2));
end
assign c_0_1_fu_249_p3 = ((tmp_28_fu_231_p1)? c_0_s_reg_78: c_1_fu_241_p3);
assign c_0_2_fu_257_p3 = ((tmp_28_fu_231_p1)? c_1_fu_241_p3: c_1_s_reg_90);

always @ (out_bits_0_V_1_fu_235_p3) begin
    if (out_bits_0_V_1_fu_235_p3[31] == 1'b1) begin
        c_1_fu_241_p3 = 32'd0;
    end else if (out_bits_0_V_1_fu_235_p3[30] == 1'b1) begin
        c_1_fu_241_p3 = 32'd1;
    end else if (out_bits_0_V_1_fu_235_p3[29] == 1'b1) begin
        c_1_fu_241_p3 = 32'd2;
    end else if (out_bits_0_V_1_fu_235_p3[28] == 1'b1) begin
        c_1_fu_241_p3 = 32'd3;
    end else if (out_bits_0_V_1_fu_235_p3[27] == 1'b1) begin
        c_1_fu_241_p3 = 32'd4;
    end else if (out_bits_0_V_1_fu_235_p3[26] == 1'b1) begin
        c_1_fu_241_p3 = 32'd5;
    end else if (out_bits_0_V_1_fu_235_p3[25] == 1'b1) begin
        c_1_fu_241_p3 = 32'd6;
    end else if (out_bits_0_V_1_fu_235_p3[24] == 1'b1) begin
        c_1_fu_241_p3 = 32'd7;
    end else if (out_bits_0_V_1_fu_235_p3[23] == 1'b1) begin
        c_1_fu_241_p3 = 32'd8;
    end else if (out_bits_0_V_1_fu_235_p3[22] == 1'b1) begin
        c_1_fu_241_p3 = 32'd9;
    end else if (out_bits_0_V_1_fu_235_p3[21] == 1'b1) begin
        c_1_fu_241_p3 = 32'd10;
    end else if (out_bits_0_V_1_fu_235_p3[20] == 1'b1) begin
        c_1_fu_241_p3 = 32'd11;
    end else if (out_bits_0_V_1_fu_235_p3[19] == 1'b1) begin
        c_1_fu_241_p3 = 32'd12;
    end else if (out_bits_0_V_1_fu_235_p3[18] == 1'b1) begin
        c_1_fu_241_p3 = 32'd13;
    end else if (out_bits_0_V_1_fu_235_p3[17] == 1'b1) begin
        c_1_fu_241_p3 = 32'd14;
    end else if (out_bits_0_V_1_fu_235_p3[16] == 1'b1) begin
        c_1_fu_241_p3 = 32'd15;
    end else if (out_bits_0_V_1_fu_235_p3[15] == 1'b1) begin
        c_1_fu_241_p3 = 32'd16;
    end else if (out_bits_0_V_1_fu_235_p3[14] == 1'b1) begin
        c_1_fu_241_p3 = 32'd17;
    end else if (out_bits_0_V_1_fu_235_p3[13] == 1'b1) begin
        c_1_fu_241_p3 = 32'd18;
    end else if (out_bits_0_V_1_fu_235_p3[12] == 1'b1) begin
        c_1_fu_241_p3 = 32'd19;
    end else if (out_bits_0_V_1_fu_235_p3[11] == 1'b1) begin
        c_1_fu_241_p3 = 32'd20;
    end else if (out_bits_0_V_1_fu_235_p3[10] == 1'b1) begin
        c_1_fu_241_p3 = 32'd21;
    end else if (out_bits_0_V_1_fu_235_p3[9] == 1'b1) begin
        c_1_fu_241_p3 = 32'd22;
    end else if (out_bits_0_V_1_fu_235_p3[8] == 1'b1) begin
        c_1_fu_241_p3 = 32'd23;
    end else if (out_bits_0_V_1_fu_235_p3[7] == 1'b1) begin
        c_1_fu_241_p3 = 32'd24;
    end else if (out_bits_0_V_1_fu_235_p3[6] == 1'b1) begin
        c_1_fu_241_p3 = 32'd25;
    end else if (out_bits_0_V_1_fu_235_p3[5] == 1'b1) begin
        c_1_fu_241_p3 = 32'd26;
    end else if (out_bits_0_V_1_fu_235_p3[4] == 1'b1) begin
        c_1_fu_241_p3 = 32'd27;
    end else if (out_bits_0_V_1_fu_235_p3[3] == 1'b1) begin
        c_1_fu_241_p3 = 32'd28;
    end else if (out_bits_0_V_1_fu_235_p3[2] == 1'b1) begin
        c_1_fu_241_p3 = 32'd29;
    end else if (out_bits_0_V_1_fu_235_p3[1] == 1'b1) begin
        c_1_fu_241_p3 = 32'd30;
    end else if (out_bits_0_V_1_fu_235_p3[0] == 1'b1) begin
        c_1_fu_241_p3 = 32'd31;
    end else begin
        c_1_fu_241_p3 = 32'd32;
    end
end


assign exitcond_fu_219_p2 = (i1_reg_102 == ap_const_lv2_2? 1'b1: 1'b0);
assign i_1_fu_273_p2 = (i2_reg_133 + ap_const_lv2_1);
assign i_fu_225_p2 = (i1_reg_102 + ap_const_lv2_1);
assign in_shift_V_fu_344_p1 = storemerge_in_fu_336_p3[30:0];
assign isNeg_fu_298_p3 = sh_assign_fu_283_p3[ap_const_lv32_1F];
assign out_bits_0_V_1_fu_235_p3 = ((tmp_28_fu_231_p1)? p_Result_s_reg_427: out_bits_0_V_reg_422);
assign out_bits_0_V_fu_183_p5 = {{tmp_fu_175_p3}, {ap_const_lv32_0[32'd14 : 32'd0]}};
assign out_exp_V_fu_389_p3 = ((tmp_17_fu_365_p2)? ap_const_lv8_0: phitmp_fu_383_p2);
assign p_Result_1_fu_165_p4 = {{in_V[ap_const_lv32_1E : ap_const_lv32_F]}};
assign p_Result_22_fu_397_p4 = {{{ap_const_lv1_0}, {out_exp_V_fu_389_p3}}, {p_Val2_s_fu_355_p4}};
assign p_Result_s_fu_207_p5 = {{tmp_2_fu_199_p3}, {ap_const_lv32_0[32'd15 : 32'd0]}};
assign p_Val2_s_fu_355_p4 = {{p_Val2_in_phi_fu_147_p4[ap_const_lv32_1D : ap_const_lv32_7]}};
assign phitmp_fu_383_p2 = (tmp_18_fu_373_p2 - tmp_33_fu_379_p1);
assign result_write_assign_fu_407_p1 = p_Result_22_fu_397_p4;
assign sh_assign_1_fu_312_p3 = ((isNeg_fu_298_p3)? tmp_13_fu_306_p2: sh_assign_fu_283_p3);
assign sh_assign_fu_283_p3 = ((tmp_29_fu_279_p1)? c_1_s_reg_90: c_0_s_reg_78);
assign shift_2_fu_291_p2 = (sh_assign_fu_283_p3 + shift_reg_122);
assign storemerge_in_fu_336_p3 = ((isNeg_fu_298_p3)? tmp_14_fu_324_p2: tmp_15_fu_330_p2);
assign tmp_13_fu_306_p2 = (ap_const_lv32_0 - sh_assign_fu_283_p3);
assign tmp_14_fu_324_p0 = tmp_s_fu_320_p1;
assign tmp_14_fu_324_p2 = $signed(tmp_14_fu_324_p0) >>> sh_assign_1_fu_312_p3;
assign tmp_15_fu_330_p0 = tmp_s_fu_320_p1;
assign tmp_15_fu_330_p2 = tmp_15_fu_330_p0 << sh_assign_1_fu_312_p3;
assign tmp_16_fu_349_p2 = (sh_assign_fu_283_p3 == ap_const_lv32_10? 1'b1: 1'b0);
assign tmp_17_fu_365_p2 = (in_V == ap_const_lv31_0? 1'b1: 1'b0);
assign tmp_18_fu_373_p2 = (ap_const_lv8_7F - tmp_32_fu_370_p1);
assign tmp_26_fu_195_p1 = in_V[14:0];
assign tmp_27_fu_265_p3 = i2_reg_133[ap_const_lv32_1];
assign tmp_28_fu_231_p1 = i1_reg_102[0:0];
assign tmp_29_fu_279_p1 = i2_reg_133[0:0];
assign tmp_2_fu_199_p3 = {{tmp_26_fu_195_p1}, {ap_const_lv1_1}};
assign tmp_32_fu_370_p1 = prescale[7:0];
assign tmp_33_fu_379_p1 = shift_1_phi_fu_157_p4[7:0];
assign tmp_fu_175_p3 = {{p_Result_1_fu_165_p4}, {ap_const_lv1_1}};
assign tmp_s_fu_320_p1 = $signed(in_shift_reg_113);
always @ (posedge ap_clk)
begin
    ap_return_preg[31] <= 1'b0;
end



endmodule //my_to_float_31_1_s

