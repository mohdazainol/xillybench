// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.4
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module big_mult_v3small_71_24_17_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_V,
        b_V,
        ap_return
);

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [70:0] a_V;
input  [23:0] b_V;
output  [94:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg   [3:0] ap_CS_fsm = 4'b0000;
wire   [40:0] tmp_fu_192_p1;
reg   [40:0] tmp_reg_411;
wire   [2:0] i_4_fu_202_p2;
reg   [2:0] i_4_reg_419;
wire   [40:0] tmp_14_fu_255_p1;
reg   [40:0] tmp_14_reg_424;
wire   [0:0] exitcond2_fu_196_p2;
wire   [40:0] grp_fu_259_p2;
reg   [40:0] tmp_5_reg_434;
wire   [63:0] tmp_6_fu_274_p1;
reg   [63:0] tmp_6_reg_442;
wire   [0:0] exitcond3_fu_268_p2;
wire   [2:0] i_3_fu_294_p2;
reg   [2:0] i_3_reg_457;
wire   [2:0] tmp_1_fu_327_p2;
reg   [2:0] tmp_1_reg_465;
wire   [0:0] exitcond_fu_321_p2;
wire   [94:0] p_Result_2_fu_378_p5;
reg   [2:0] pp_V_address0;
reg    pp_V_ce0;
reg    pp_V_we0;
wire   [40:0] pp_V_d0;
wire   [40:0] pp_V_q0;
reg   [2:0] pps_V_address0;
reg    pps_V_ce0;
reg    pps_V_we0;
reg   [40:0] pps_V_d0;
wire   [40:0] pps_V_q0;
reg   [2:0] i_reg_144;
reg   [2:0] i_1_reg_156;
reg   [94:0] p_Val2_s_reg_167;
reg   [2:0] i_2_reg_179;
wire   [63:0] tmp_3_fu_263_p1;
wire   [63:0] tmp_8_fu_289_p1;
wire   [63:0] tmp_4_fu_333_p1;
wire   [40:0] tmp_9_fu_314_p2;
wire   [6:0] Lo_assign_fu_214_p4;
wire   [0:0] tmp_s_fu_208_p2;
wire   [6:0] tmp_2_fu_228_p2;
wire   [6:0] Ui_1_fu_234_p3;
wire   [31:0] tmp_23_cast_fu_224_p1;
wire   [31:0] Ui_2_cast_fu_242_p1;
wire   [70:0] p_Result_3_fu_246_p4;
wire   [40:0] grp_fu_259_p0;
wire   [23:0] grp_fu_259_p1;
wire   [1:0] tmp_15_fu_279_p1;
wire   [1:0] tmp_7_fu_283_p2;
wire   [23:0] r_V_fu_300_p4;
wire   [40:0] r_V_1_fu_310_p1;
wire   [1:0] tmp_17_fu_338_p1;
wire   [5:0] Li_fu_342_p4;
wire   [6:0] Li_cast_fu_356_p1;
wire   [6:0] Ui_fu_360_p2;
wire   [16:0] tmp_18_fu_370_p1;
wire   [94:0] loc_V_fu_374_p1;
wire   [31:0] Li_cast2_fu_352_p1;
wire   [31:0] Hi_assign_cast_fu_366_p1;
wire   [26:0] tmp_16_fu_390_p1;
wire    grp_fu_259_ce;
reg   [3:0] ap_NS_fsm;
parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 4'b0000;
parameter    ap_ST_st2_fsm_1 = 4'b1;
parameter    ap_ST_st3_fsm_2 = 4'b10;
parameter    ap_ST_st4_fsm_3 = 4'b11;
parameter    ap_ST_st5_fsm_4 = 4'b100;
parameter    ap_ST_st6_fsm_5 = 4'b101;
parameter    ap_ST_st7_fsm_6 = 4'b110;
parameter    ap_ST_st8_fsm_7 = 4'b111;
parameter    ap_ST_st9_fsm_8 = 4'b1000;
parameter    ap_ST_st10_fsm_9 = 4'b1001;
parameter    ap_ST_st11_fsm_10 = 4'b1010;
parameter    ap_ST_st12_fsm_11 = 4'b1011;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv3_1 = 3'b1;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv64_4 = 64'b100;
parameter    ap_const_lv3_5 = 3'b101;
parameter    ap_const_lv3_4 = 3'b100;
parameter    ap_const_lv7_10 = 7'b10000;
parameter    ap_const_lv7_46 = 7'b1000110;
parameter    ap_const_lv2_3 = 2'b11;
parameter    ap_const_lv32_11 = 32'b10001;
parameter    ap_const_lv32_28 = 32'b101000;
parameter    ap_const_lv32_44 = 32'b1000100;
parameter    ap_const_lv32_5E = 32'b1011110;
parameter    ap_true = 1'b1;


big_mult_v3small_71_24_17_s_pp_V #(
    .DataWidth( 41 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
pp_V_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( pp_V_address0 ),
    .ce0( pp_V_ce0 ),
    .we0( pp_V_we0 ),
    .d0( pp_V_d0 ),
    .q0( pp_V_q0 )
);

big_mult_v3small_71_24_17_s_pp_V #(
    .DataWidth( 41 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
pps_V_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( pps_V_address0 ),
    .ce0( pps_V_ce0 ),
    .we0( pps_V_we0 ),
    .d0( pps_V_d0 ),
    .q0( pps_V_q0 )
);

xillybus_wrapper_mul_41s_24ns_41_3 #(
    .ID( 6 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 41 ),
    .din1_WIDTH( 24 ),
    .dout_WIDTH( 41 ))
xillybus_wrapper_mul_41s_24ns_41_3_U6(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_259_p0 ),
    .din1( grp_fu_259_p1 ),
    .ce( grp_fu_259_ce ),
    .dout( grp_fu_259_p2 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st9_fsm_8 == ap_CS_fsm)) begin
        i_1_reg_156 <= i_3_reg_457;
    end else if ((ap_ST_st7_fsm_6 == ap_CS_fsm)) begin
        i_1_reg_156 <= ap_const_lv3_1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st8_fsm_7 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond3_fu_268_p2))) begin
        i_2_reg_179 <= ap_const_lv3_0;
    end else if ((ap_ST_st11_fsm_10 == ap_CS_fsm)) begin
        i_2_reg_179 <= tmp_1_reg_465;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0))) begin
        i_reg_144 <= ap_const_lv3_0;
    end else if ((ap_ST_st6_fsm_5 == ap_CS_fsm)) begin
        i_reg_144 <= i_4_reg_419;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st8_fsm_7 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond3_fu_268_p2))) begin
        i_3_reg_457 <= i_3_fu_294_p2;
        tmp_6_reg_442[0] <= tmp_6_fu_274_p1[0];
tmp_6_reg_442[1] <= tmp_6_fu_274_p1[1];
tmp_6_reg_442[2] <= tmp_6_fu_274_p1[2];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
        i_4_reg_419 <= i_4_fu_202_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st11_fsm_10 == ap_CS_fsm)) begin
        p_Val2_s_reg_167 <= p_Result_2_fu_378_p5;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & (exitcond2_fu_196_p2 == ap_const_lv1_0))) begin
        tmp_14_reg_424 <= tmp_14_fu_255_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st10_fsm_9 == ap_CS_fsm)) begin
        tmp_1_reg_465 <= tmp_1_fu_327_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st5_fsm_4 == ap_CS_fsm)) begin
        tmp_5_reg_434 <= grp_fu_259_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0))) begin
        tmp_reg_411[0] <= tmp_fu_192_p1[0];
tmp_reg_411[1] <= tmp_fu_192_p1[1];
tmp_reg_411[2] <= tmp_fu_192_p1[2];
tmp_reg_411[3] <= tmp_fu_192_p1[3];
tmp_reg_411[4] <= tmp_fu_192_p1[4];
tmp_reg_411[5] <= tmp_fu_192_p1[5];
tmp_reg_411[6] <= tmp_fu_192_p1[6];
tmp_reg_411[7] <= tmp_fu_192_p1[7];
tmp_reg_411[8] <= tmp_fu_192_p1[8];
tmp_reg_411[9] <= tmp_fu_192_p1[9];
tmp_reg_411[10] <= tmp_fu_192_p1[10];
tmp_reg_411[11] <= tmp_fu_192_p1[11];
tmp_reg_411[12] <= tmp_fu_192_p1[12];
tmp_reg_411[13] <= tmp_fu_192_p1[13];
tmp_reg_411[14] <= tmp_fu_192_p1[14];
tmp_reg_411[15] <= tmp_fu_192_p1[15];
tmp_reg_411[16] <= tmp_fu_192_p1[16];
tmp_reg_411[17] <= tmp_fu_192_p1[17];
tmp_reg_411[18] <= tmp_fu_192_p1[18];
tmp_reg_411[19] <= tmp_fu_192_p1[19];
tmp_reg_411[20] <= tmp_fu_192_p1[20];
tmp_reg_411[21] <= tmp_fu_192_p1[21];
tmp_reg_411[22] <= tmp_fu_192_p1[22];
tmp_reg_411[23] <= tmp_fu_192_p1[23];
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm)) | (ap_ST_st12_fsm_11 == ap_CS_fsm))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st12_fsm_11 == ap_CS_fsm)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// pp_V_address0 assign process. ///
always @ (ap_CS_fsm or tmp_6_fu_274_p1 or tmp_3_fu_263_p1)
begin
    if ((ap_ST_st6_fsm_5 == ap_CS_fsm)) begin
        pp_V_address0 = tmp_3_fu_263_p1;
    end else if ((ap_ST_st8_fsm_7 == ap_CS_fsm)) begin
        pp_V_address0 = tmp_6_fu_274_p1;
    end else if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
        pp_V_address0 = ap_const_lv64_0;
    end else begin
        pp_V_address0 = 'bx;
    end
end

/// pp_V_ce0 assign process. ///
always @ (ap_CS_fsm)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) | (ap_ST_st8_fsm_7 == ap_CS_fsm) | (ap_ST_st6_fsm_5 == ap_CS_fsm))) begin
        pp_V_ce0 = ap_const_logic_1;
    end else begin
        pp_V_ce0 = ap_const_logic_0;
    end
end

/// pp_V_we0 assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st6_fsm_5 == ap_CS_fsm)) begin
        pp_V_we0 = ap_const_logic_1;
    end else begin
        pp_V_we0 = ap_const_logic_0;
    end
end

/// pps_V_address0 assign process. ///
always @ (ap_CS_fsm or tmp_6_reg_442 or exitcond_fu_321_p2 or tmp_8_fu_289_p1 or tmp_4_fu_333_p1)
begin
    if ((ap_ST_st9_fsm_8 == ap_CS_fsm)) begin
        pps_V_address0 = tmp_6_reg_442;
    end else if ((ap_ST_st7_fsm_6 == ap_CS_fsm)) begin
        pps_V_address0 = ap_const_lv64_0;
    end else if (((ap_ST_st10_fsm_9 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond_fu_321_p2))) begin
        pps_V_address0 = ap_const_lv64_4;
    end else if (((ap_ST_st10_fsm_9 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond_fu_321_p2))) begin
        pps_V_address0 = tmp_4_fu_333_p1;
    end else if ((ap_ST_st8_fsm_7 == ap_CS_fsm)) begin
        pps_V_address0 = tmp_8_fu_289_p1;
    end else begin
        pps_V_address0 = 'bx;
    end
end

/// pps_V_ce0 assign process. ///
always @ (ap_CS_fsm or exitcond_fu_321_p2)
begin
    if (((ap_ST_st8_fsm_7 == ap_CS_fsm) | ((ap_ST_st10_fsm_9 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond_fu_321_p2)) | ((ap_ST_st10_fsm_9 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond_fu_321_p2)) | (ap_ST_st7_fsm_6 == ap_CS_fsm) | (ap_ST_st9_fsm_8 == ap_CS_fsm))) begin
        pps_V_ce0 = ap_const_logic_1;
    end else begin
        pps_V_ce0 = ap_const_logic_0;
    end
end

/// pps_V_d0 assign process. ///
always @ (ap_CS_fsm or pp_V_q0 or tmp_9_fu_314_p2)
begin
    if ((ap_ST_st9_fsm_8 == ap_CS_fsm)) begin
        pps_V_d0 = tmp_9_fu_314_p2;
    end else if ((ap_ST_st7_fsm_6 == ap_CS_fsm)) begin
        pps_V_d0 = pp_V_q0;
    end else begin
        pps_V_d0 = 'bx;
    end
end

/// pps_V_we0 assign process. ///
always @ (ap_CS_fsm)
begin
    if (((ap_ST_st7_fsm_6 == ap_CS_fsm) | (ap_ST_st9_fsm_8 == ap_CS_fsm))) begin
        pps_V_we0 = ap_const_logic_1;
    end else begin
        pps_V_we0 = ap_const_logic_0;
    end
end
always @ (ap_start or ap_CS_fsm or exitcond2_fu_196_p2 or exitcond3_fu_268_p2 or exitcond_fu_321_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        ap_ST_st2_fsm_1 : 
            if (~(exitcond2_fu_196_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st7_fsm_6;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        ap_ST_st3_fsm_2 : 
            ap_NS_fsm = ap_ST_st4_fsm_3;
        ap_ST_st4_fsm_3 : 
            ap_NS_fsm = ap_ST_st5_fsm_4;
        ap_ST_st5_fsm_4 : 
            ap_NS_fsm = ap_ST_st6_fsm_5;
        ap_ST_st6_fsm_5 : 
            ap_NS_fsm = ap_ST_st2_fsm_1;
        ap_ST_st7_fsm_6 : 
            ap_NS_fsm = ap_ST_st8_fsm_7;
        ap_ST_st8_fsm_7 : 
            if (~(ap_const_lv1_0 == exitcond3_fu_268_p2)) begin
                ap_NS_fsm = ap_ST_st10_fsm_9;
            end else begin
                ap_NS_fsm = ap_ST_st9_fsm_8;
            end
        ap_ST_st9_fsm_8 : 
            ap_NS_fsm = ap_ST_st8_fsm_7;
        ap_ST_st10_fsm_9 : 
            if (~(ap_const_lv1_0 == exitcond_fu_321_p2)) begin
                ap_NS_fsm = ap_ST_st12_fsm_11;
            end else begin
                ap_NS_fsm = ap_ST_st11_fsm_10;
            end
        ap_ST_st11_fsm_10 : 
            ap_NS_fsm = ap_ST_st10_fsm_9;
        ap_ST_st12_fsm_11 : 
            ap_NS_fsm = ap_ST_st1_fsm_0;
        default : 
            ap_NS_fsm = 'bx;
    endcase
end
assign Hi_assign_cast_fu_366_p1 = $unsigned(Ui_fu_360_p2);
assign Li_cast2_fu_352_p1 = $unsigned(Li_fu_342_p4);
assign Li_cast_fu_356_p1 = $unsigned(Li_fu_342_p4);
assign Li_fu_342_p4 = {{{tmp_17_fu_338_p1}, {ap_const_lv1_0}}, {i_2_reg_179}};
assign Lo_assign_fu_214_p4 = {{{i_reg_144}, {ap_const_lv1_0}}, {i_reg_144}};
assign Ui_1_fu_234_p3 = ((tmp_s_fu_208_p2)? ap_const_lv7_46: tmp_2_fu_228_p2);
assign Ui_2_cast_fu_242_p1 = $unsigned(Ui_1_fu_234_p3);
assign Ui_fu_360_p2 = (Li_cast_fu_356_p1 + ap_const_lv7_10);
assign ap_return = {{tmp_16_fu_390_p1}, {p_Val2_s_reg_167[32'd67 : 32'd0]}};
assign exitcond2_fu_196_p2 = (i_reg_144 == ap_const_lv3_5? 1'b1: 1'b0);
assign exitcond3_fu_268_p2 = (i_1_reg_156 == ap_const_lv3_5? 1'b1: 1'b0);
assign exitcond_fu_321_p2 = (i_2_reg_179 == ap_const_lv3_4? 1'b1: 1'b0);
assign grp_fu_259_ce = ap_const_logic_1;
assign grp_fu_259_p0 = tmp_14_reg_424;
assign grp_fu_259_p1 = tmp_reg_411;
assign i_3_fu_294_p2 = (i_1_reg_156 + ap_const_lv3_1);
assign i_4_fu_202_p2 = (i_reg_144 + ap_const_lv3_1);
assign loc_V_fu_374_p1 = $unsigned(tmp_18_fu_370_p1);
wire [7-1:0] p_Result_2_fu_378_p5_vHi_buf;
wire [7-1:0] p_Result_2_fu_378_p5_vLo_buf;
wire [95-1:0] p_Result_2_fu_378_p5_v1_buf;
wire [95-1:0] p_Result_2_fu_378_p5_v1_buf_r;
wire [95-1:0] p_Result_2_fu_378_p5_v1_tmp;
wire [7-1:0] p_Result_2_fu_378_p5_v1_shift;
wire [95-1:0] p_Result_2_fu_378_p5_mask0;
wire [95-1:0] p_Result_2_fu_378_p5_mask1;
wire [95-1:0] p_Result_2_fu_378_p5_mask2;

genvar ap_tvar_int_0;
generate
    for (ap_tvar_int_0 = 0; ap_tvar_int_0 < 95; ap_tvar_int_0 = ap_tvar_int_0 + 1) begin :p_Result_2_fu_378_p5_label0
        assign p_Result_2_fu_378_p5_v1_buf_r[ap_tvar_int_0] = p_Result_2_fu_378_p5_v1_buf[95-1-ap_tvar_int_0];
    end
endgenerate

assign p_Result_2_fu_378_p5_vHi_buf = (Hi_assign_cast_fu_366_p1 >= Li_cast2_fu_352_p1)? Hi_assign_cast_fu_366_p1 : Li_cast2_fu_352_p1;
assign p_Result_2_fu_378_p5_vLo_buf = (Hi_assign_cast_fu_366_p1 >= Li_cast2_fu_352_p1)? Li_cast2_fu_352_p1 : Hi_assign_cast_fu_366_p1;
assign p_Result_2_fu_378_p5_v1_buf = loc_V_fu_374_p1;
assign p_Result_2_fu_378_p5_v1_shift = (Hi_assign_cast_fu_366_p1 >= Li_cast2_fu_352_p1)? Li_cast2_fu_352_p1 : (95-1-Li_cast2_fu_352_p1);
assign p_Result_2_fu_378_p5_v1_tmp = (Hi_assign_cast_fu_366_p1 >= Li_cast2_fu_352_p1)? (p_Result_2_fu_378_p5_v1_buf << p_Result_2_fu_378_p5_v1_shift) : (p_Result_2_fu_378_p5_v1_buf_r >> p_Result_2_fu_378_p5_v1_shift);
assign p_Result_2_fu_378_p5_mask0 = {{(95-1){1'b1}}, 1'b0} << p_Result_2_fu_378_p5_vHi_buf;
assign p_Result_2_fu_378_p5_mask1 = ~({(95){1'b1}} << p_Result_2_fu_378_p5_vLo_buf);
assign p_Result_2_fu_378_p5_mask2 = p_Result_2_fu_378_p5_mask0 | p_Result_2_fu_378_p5_mask1;
assign p_Result_2_fu_378_p5 = (p_Val2_s_reg_167 & p_Result_2_fu_378_p5_mask2) | (p_Result_2_fu_378_p5_v1_tmp & ~p_Result_2_fu_378_p5_mask2);

wire [7-1:0] p_Result_3_fu_246_p4_vh_buf;
wire [7-1:0] p_Result_3_fu_246_p4_vl_buf;
wire [71-1:0] p_Result_3_fu_246_p4_vi_buf;
wire [71-1:0] p_Result_3_fu_246_p4_vo_buf;
wire [71-1:0] p_Result_3_fu_246_p4_vi_r;
wire [7:0] p_Result_3_fu_246_p4_length;
wire [71-1:0] p_Result_3_fu_246_p4_mask;

genvar ap_tvar_int_1;
generate
    for (ap_tvar_int_1 = 0; ap_tvar_int_1 < 71; ap_tvar_int_1 = ap_tvar_int_1 + 1) begin :p_Result_3_fu_246_p4_label0
        assign p_Result_3_fu_246_p4_vi_r[ap_tvar_int_1] = a_V[71-1-ap_tvar_int_1];
    end
endgenerate

assign p_Result_3_fu_246_p4_vh_buf = (Ui_2_cast_fu_242_p1 >= tmp_23_cast_fu_224_p1)? Ui_2_cast_fu_242_p1 : (71 -1- Ui_2_cast_fu_242_p1);
assign p_Result_3_fu_246_p4_vl_buf = (Ui_2_cast_fu_242_p1 >= tmp_23_cast_fu_224_p1)? tmp_23_cast_fu_224_p1 : (71 -1-tmp_23_cast_fu_224_p1);
assign p_Result_3_fu_246_p4_vi_buf = (Ui_2_cast_fu_242_p1 >= tmp_23_cast_fu_224_p1)? a_V : p_Result_3_fu_246_p4_vi_r;
assign p_Result_3_fu_246_p4_length = p_Result_3_fu_246_p4_vh_buf - p_Result_3_fu_246_p4_vl_buf + 1'b1;
assign p_Result_3_fu_246_p4_mask = ~({71{1'b1}} << p_Result_3_fu_246_p4_length);
assign p_Result_3_fu_246_p4 = (p_Result_3_fu_246_p4_vi_buf >> p_Result_3_fu_246_p4_vl_buf) & p_Result_3_fu_246_p4_mask;

assign pp_V_d0 = tmp_5_reg_434;
assign r_V_1_fu_310_p1 = $unsigned(r_V_fu_300_p4);
assign r_V_fu_300_p4 = {{pps_V_q0[ap_const_lv32_28 : ap_const_lv32_11]}};
assign tmp_14_fu_255_p1 = p_Result_3_fu_246_p4[40:0];
assign tmp_15_fu_279_p1 = i_1_reg_156[1:0];
assign tmp_16_fu_390_p1 = pps_V_q0[26:0];
assign tmp_17_fu_338_p1 = i_2_reg_179[1:0];
assign tmp_18_fu_370_p1 = pps_V_q0[16:0];
assign tmp_1_fu_327_p2 = (i_2_reg_179 + ap_const_lv3_1);
assign tmp_23_cast_fu_224_p1 = $unsigned(Lo_assign_fu_214_p4);
assign tmp_2_fu_228_p2 = (Lo_assign_fu_214_p4 + ap_const_lv7_10);
assign tmp_3_fu_263_p1 = $unsigned(i_reg_144);
assign tmp_4_fu_333_p1 = $unsigned(i_2_reg_179);
assign tmp_6_fu_274_p1 = $unsigned(i_1_reg_156);
assign tmp_7_fu_283_p2 = (tmp_15_fu_279_p1 + ap_const_lv2_3);
assign tmp_8_fu_289_p1 = $unsigned(tmp_7_fu_283_p2);
assign tmp_9_fu_314_p2 = (r_V_1_fu_310_p1 + pp_V_q0);
assign tmp_fu_192_p1 = $unsigned(b_V);
assign tmp_s_fu_208_p2 = (i_reg_144 == ap_const_lv3_4? 1'b1: 1'b0);
always @ (posedge ap_clk)
begin
    tmp_reg_411[40:24] <= 17'b00000000000000000;
    tmp_6_reg_442[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
end



endmodule //big_mult_v3small_71_24_17_s

