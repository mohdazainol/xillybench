// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.4
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module xilly_decprint (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        val_r,
        debug_ready,
        debug_out,
        debug_out_ap_vld
);

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] val_r;
input  [7:0] debug_ready;
output  [7:0] debug_out;
output   debug_out_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg debug_out_ap_vld;
reg   [2:0] ap_CS_fsm = 3'b000;
reg   [3:0] powers10_address0;
reg    powers10_ce0;
wire   [27:0] powers10_q0;
wire   [31:0] first_2_cast1_fu_144_p1;
reg   [31:0] first_2_cast1_reg_304;
wire   [3:0] i_fu_154_p2;
reg   [3:0] i_reg_313;
wire   [63:0] tmp_3_fu_160_p1;
reg   [63:0] tmp_3_reg_318;
wire   [0:0] exitcond_fu_148_p2;
reg   [3:0] powers10_addr_reg_323;
wire   [4:0] tmp_1_fu_165_p1;
reg   [4:0] tmp_1_reg_328;
wire   [31:0] powers10_load_cast_fu_173_p1;
reg   [31:0] powers10_load_cast_reg_333;
reg   [31:0] v_load_reg_338;
wire   [7:0] x_1_fu_185_p2;
reg   [7:0] x_1_reg_346;
wire   [31:0] first_1_fu_233_p3;
wire   [0:0] tmp_4_fu_180_p2;
wire   [63:0] p_rec_i_fu_272_p2;
reg   [63:0] p_rec_i_reg_361;
wire   [7:0] out_q0;
reg   [7:0] out_load_reg_366;
reg   [3:0] out_address0;
reg    out_ce0;
reg    out_we0;
reg   [7:0] out_d0;
reg   [31:0] first_reg_93;
reg   [3:0] first_2_reg_105;
reg   [7:0] x_reg_116;
reg   [63:0] p_0_rec_i_reg_127;
wire   [0:0] tmp_8_fu_288_p1;
wire   [63:0] sum_i_cast_fu_267_p1;
reg   [31:0] v_fu_40;
wire   [31:0] v_1_fu_248_p2;
wire   [7:0] tmp_5_fu_205_p4;
wire   [29:0] powers10_load_cast_fu_173_p0;
wire   [1:0] tmp_fu_191_p4;
wire   [3:0] tmp_9_fu_201_p1;
wire   [0:0] tmp_6_fu_216_p2;
wire   [0:0] tmp_7_fu_222_p2;
wire   [0:0] or_cond_fu_227_p2;
wire   [29:0] powers10_load_1_cast_fu_244_p0;
wire   [31:0] powers10_load_1_cast_fu_244_p1;
wire   [4:0] tmp_2_fu_258_p1;
wire   [4:0] sum_i_fu_262_p2;
wire   [0:0] tmp1_i_fu_278_p2;
reg   [2:0] ap_NS_fsm;
parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 3'b000;
parameter    ap_ST_st2_fsm_1 = 3'b1;
parameter    ap_ST_st3_fsm_2 = 3'b10;
parameter    ap_ST_st4_fsm_3 = 3'b11;
parameter    ap_ST_st5_fsm_4 = 3'b100;
parameter    ap_ST_st6_fsm_5 = 3'b101;
parameter    ap_ST_st7_fsm_6 = 3'b110;
parameter    ap_ST_st8_fsm_7 = 3'b111;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv64_A = 64'b1010;
parameter    ap_const_lv64_1 = 64'b1;
parameter    ap_const_lv4_A = 4'b1010;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv8_1 = 8'b1;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv2_3 = 2'b11;
parameter    ap_true = 1'b1;


xilly_decprint_powers10 #(
    .DataWidth( 28 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
powers10_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( powers10_address0 ),
    .ce0( powers10_ce0 ),
    .q0( powers10_q0 )
);

xilly_decprint_out #(
    .DataWidth( 8 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
out_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( out_address0 ),
    .ce0( out_ce0 ),
    .we0( out_we0 ),
    .d0( out_d0 ),
    .q0( out_q0 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st4_fsm_3 == ap_CS_fsm) & ~(ap_const_lv1_0 == tmp_4_fu_180_p2))) begin
        first_2_reg_105 <= i_reg_313;
    end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0))) begin
        first_2_reg_105 <= ap_const_lv4_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st4_fsm_3 == ap_CS_fsm) & ~(ap_const_lv1_0 == tmp_4_fu_180_p2))) begin
        first_reg_93 <= first_1_fu_233_p3;
    end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0))) begin
        first_reg_93 <= ap_const_lv32_9;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st8_fsm_7 == ap_CS_fsm) & ~(ap_const_lv1_0 == tmp_8_fu_288_p1))) begin
        p_0_rec_i_reg_127 <= p_rec_i_reg_361;
    end else if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(exitcond_fu_148_p2 == ap_const_lv1_0))) begin
        p_0_rec_i_reg_127 <= ap_const_lv64_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st5_fsm_4 == ap_CS_fsm)) begin
        v_fu_40 <= v_1_fu_248_p2;
    end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0))) begin
        v_fu_40 <= val_r;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
        x_reg_116 <= ap_const_lv8_0;
    end else if ((ap_ST_st5_fsm_4 == ap_CS_fsm)) begin
        x_reg_116 <= x_1_reg_346;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
        first_2_cast1_reg_304[0] <= first_2_cast1_fu_144_p1[0];
first_2_cast1_reg_304[1] <= first_2_cast1_fu_144_p1[1];
first_2_cast1_reg_304[2] <= first_2_cast1_fu_144_p1[2];
first_2_cast1_reg_304[3] <= first_2_cast1_fu_144_p1[3];
        i_reg_313 <= i_fu_154_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st7_fsm_6 == ap_CS_fsm)) begin
        out_load_reg_366 <= out_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st6_fsm_5 == ap_CS_fsm)) begin
        p_rec_i_reg_361 <= p_rec_i_fu_272_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & (exitcond_fu_148_p2 == ap_const_lv1_0))) begin
        powers10_addr_reg_323 <= tmp_3_fu_160_p1;
        tmp_3_reg_318[0] <= tmp_3_fu_160_p1[0];
tmp_3_reg_318[1] <= tmp_3_fu_160_p1[1];
tmp_3_reg_318[2] <= tmp_3_fu_160_p1[2];
tmp_3_reg_318[3] <= tmp_3_fu_160_p1[3];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
        powers10_load_cast_reg_333[0] <= powers10_load_cast_fu_173_p1[0];
powers10_load_cast_reg_333[1] <= powers10_load_cast_fu_173_p1[1];
powers10_load_cast_reg_333[2] <= powers10_load_cast_fu_173_p1[2];
powers10_load_cast_reg_333[3] <= powers10_load_cast_fu_173_p1[3];
powers10_load_cast_reg_333[4] <= powers10_load_cast_fu_173_p1[4];
powers10_load_cast_reg_333[5] <= powers10_load_cast_fu_173_p1[5];
powers10_load_cast_reg_333[6] <= powers10_load_cast_fu_173_p1[6];
powers10_load_cast_reg_333[7] <= powers10_load_cast_fu_173_p1[7];
powers10_load_cast_reg_333[8] <= powers10_load_cast_fu_173_p1[8];
powers10_load_cast_reg_333[9] <= powers10_load_cast_fu_173_p1[9];
powers10_load_cast_reg_333[10] <= powers10_load_cast_fu_173_p1[10];
powers10_load_cast_reg_333[11] <= powers10_load_cast_fu_173_p1[11];
powers10_load_cast_reg_333[12] <= powers10_load_cast_fu_173_p1[12];
powers10_load_cast_reg_333[13] <= powers10_load_cast_fu_173_p1[13];
powers10_load_cast_reg_333[14] <= powers10_load_cast_fu_173_p1[14];
powers10_load_cast_reg_333[15] <= powers10_load_cast_fu_173_p1[15];
powers10_load_cast_reg_333[16] <= powers10_load_cast_fu_173_p1[16];
powers10_load_cast_reg_333[17] <= powers10_load_cast_fu_173_p1[17];
powers10_load_cast_reg_333[18] <= powers10_load_cast_fu_173_p1[18];
powers10_load_cast_reg_333[19] <= powers10_load_cast_fu_173_p1[19];
powers10_load_cast_reg_333[20] <= powers10_load_cast_fu_173_p1[20];
powers10_load_cast_reg_333[21] <= powers10_load_cast_fu_173_p1[21];
powers10_load_cast_reg_333[22] <= powers10_load_cast_fu_173_p1[22];
powers10_load_cast_reg_333[23] <= powers10_load_cast_fu_173_p1[23];
powers10_load_cast_reg_333[24] <= powers10_load_cast_fu_173_p1[24];
powers10_load_cast_reg_333[25] <= powers10_load_cast_fu_173_p1[25];
powers10_load_cast_reg_333[26] <= powers10_load_cast_fu_173_p1[26];
powers10_load_cast_reg_333[27] <= powers10_load_cast_fu_173_p1[27];
powers10_load_cast_reg_333[28] <= powers10_load_cast_fu_173_p1[28];
powers10_load_cast_reg_333[29] <= powers10_load_cast_fu_173_p1[29];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(exitcond_fu_148_p2 == ap_const_lv1_0))) begin
        tmp_1_reg_328 <= tmp_1_fu_165_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        v_load_reg_338 <= v_fu_40;
        x_1_reg_346 <= x_1_fu_185_p2;
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_CS_fsm or tmp1_i_fu_278_p2)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm)) | ((ap_ST_st7_fsm_6 == ap_CS_fsm) & ~(ap_const_lv1_0 == tmp1_i_fu_278_p2)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_CS_fsm or tmp1_i_fu_278_p2)
begin
    if (((ap_ST_st7_fsm_6 == ap_CS_fsm) & ~(ap_const_lv1_0 == tmp1_i_fu_278_p2))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// debug_out_ap_vld assign process. ///
always @ (ap_CS_fsm or tmp_8_fu_288_p1)
begin
    if (((ap_ST_st8_fsm_7 == ap_CS_fsm) & ~(ap_const_lv1_0 == tmp_8_fu_288_p1))) begin
        debug_out_ap_vld = ap_const_logic_1;
    end else begin
        debug_out_ap_vld = ap_const_logic_0;
    end
end

/// out_address0 assign process. ///
always @ (ap_CS_fsm or tmp_3_reg_318 or sum_i_cast_fu_267_p1)
begin
    if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        out_address0 = tmp_3_reg_318;
    end else if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
        out_address0 = ap_const_lv64_A;
    end else if ((ap_ST_st6_fsm_5 == ap_CS_fsm)) begin
        out_address0 = sum_i_cast_fu_267_p1;
    end else begin
        out_address0 = 'bx;
    end
end

/// out_ce0 assign process. ///
always @ (ap_CS_fsm)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) | (ap_ST_st4_fsm_3 == ap_CS_fsm) | (ap_ST_st6_fsm_5 == ap_CS_fsm))) begin
        out_ce0 = ap_const_logic_1;
    end else begin
        out_ce0 = ap_const_logic_0;
    end
end

/// out_d0 assign process. ///
always @ (ap_CS_fsm or tmp_5_fu_205_p4)
begin
    if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        out_d0 = tmp_5_fu_205_p4;
    end else if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
        out_d0 = ap_const_lv8_0;
    end else begin
        out_d0 = 'bx;
    end
end

/// out_we0 assign process. ///
always @ (ap_CS_fsm or exitcond_fu_148_p2 or tmp_4_fu_180_p2)
begin
    if ((((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(exitcond_fu_148_p2 == ap_const_lv1_0)) | ((ap_ST_st4_fsm_3 == ap_CS_fsm) & ~(ap_const_lv1_0 == tmp_4_fu_180_p2)))) begin
        out_we0 = ap_const_logic_1;
    end else begin
        out_we0 = ap_const_logic_0;
    end
end

/// powers10_address0 assign process. ///
always @ (ap_CS_fsm or tmp_3_fu_160_p1 or powers10_addr_reg_323)
begin
    if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        powers10_address0 = powers10_addr_reg_323;
    end else if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
        powers10_address0 = tmp_3_fu_160_p1;
    end else begin
        powers10_address0 = 'bx;
    end
end

/// powers10_ce0 assign process. ///
always @ (ap_CS_fsm)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) | (ap_ST_st4_fsm_3 == ap_CS_fsm))) begin
        powers10_ce0 = ap_const_logic_1;
    end else begin
        powers10_ce0 = ap_const_logic_0;
    end
end
always @ (ap_start or ap_CS_fsm or exitcond_fu_148_p2 or tmp_4_fu_180_p2 or tmp_8_fu_288_p1 or tmp1_i_fu_278_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        ap_ST_st2_fsm_1 : 
            if (~(exitcond_fu_148_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        ap_ST_st3_fsm_2 : 
            ap_NS_fsm = ap_ST_st4_fsm_3;
        ap_ST_st4_fsm_3 : 
            if (~(ap_const_lv1_0 == tmp_4_fu_180_p2)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end
        ap_ST_st5_fsm_4 : 
            ap_NS_fsm = ap_ST_st4_fsm_3;
        ap_ST_st6_fsm_5 : 
            ap_NS_fsm = ap_ST_st7_fsm_6;
        ap_ST_st7_fsm_6 : 
            if (~(ap_const_lv1_0 == tmp1_i_fu_278_p2)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st8_fsm_7;
            end
        ap_ST_st8_fsm_7 : 
            if (~(ap_const_lv1_0 == tmp_8_fu_288_p1)) begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end else begin
                ap_NS_fsm = ap_ST_st8_fsm_7;
            end
        default : 
            ap_NS_fsm = 'bx;
    endcase
end
assign debug_out = out_load_reg_366;
assign exitcond_fu_148_p2 = (first_2_reg_105 == ap_const_lv4_A? 1'b1: 1'b0);
assign first_1_fu_233_p3 = ((or_cond_fu_227_p2)? first_2_cast1_reg_304: first_reg_93);
assign first_2_cast1_fu_144_p1 = $unsigned(first_2_reg_105);
assign i_fu_154_p2 = (first_2_reg_105 + ap_const_lv4_1);
assign or_cond_fu_227_p2 = (tmp_6_fu_216_p2 & tmp_7_fu_222_p2);
assign p_rec_i_fu_272_p2 = (p_0_rec_i_reg_127 + ap_const_lv64_1);
assign powers10_load_1_cast_fu_244_p0 = $signed(powers10_q0);
assign powers10_load_1_cast_fu_244_p1 = $unsigned(powers10_load_1_cast_fu_244_p0);
assign powers10_load_cast_fu_173_p0 = $signed(powers10_q0);
assign powers10_load_cast_fu_173_p1 = $unsigned(powers10_load_cast_fu_173_p0);
assign sum_i_cast_fu_267_p1 = $unsigned(sum_i_fu_262_p2);
assign sum_i_fu_262_p2 = (tmp_2_fu_258_p1 + tmp_1_reg_328);
assign tmp1_i_fu_278_p2 = (out_q0 == ap_const_lv8_0? 1'b1: 1'b0);
assign tmp_1_fu_165_p1 = first_reg_93[4:0];
assign tmp_2_fu_258_p1 = p_0_rec_i_reg_127[4:0];
assign tmp_3_fu_160_p1 = $unsigned(first_2_reg_105);
assign tmp_4_fu_180_p2 = (v_fu_40 < powers10_load_cast_reg_333? 1'b1: 1'b0);
assign tmp_5_fu_205_p4 = {{{tmp_fu_191_p4}, {ap_const_lv2_3}}, {tmp_9_fu_201_p1}};
assign tmp_6_fu_216_p2 = (x_reg_116 != ap_const_lv8_0? 1'b1: 1'b0);
assign tmp_7_fu_222_p2 = ($signed(first_reg_93) > $signed(first_2_cast1_reg_304)? 1'b1: 1'b0);
assign tmp_8_fu_288_p1 = debug_ready[0:0];
assign tmp_9_fu_201_p1 = x_reg_116[3:0];
assign tmp_fu_191_p4 = {{x_reg_116[ap_const_lv32_7 : ap_const_lv32_6]}};
assign v_1_fu_248_p2 = (v_load_reg_338 - powers10_load_1_cast_fu_244_p1);
assign x_1_fu_185_p2 = (x_reg_116 + ap_const_lv8_1);
always @ (posedge ap_clk)
begin
    first_2_cast1_reg_304[31:4] <= 28'b0000000000000000000000000000;
    tmp_3_reg_318[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    powers10_load_cast_reg_333[31:30] <= 2'b00;
end



endmodule //xilly_decprint

