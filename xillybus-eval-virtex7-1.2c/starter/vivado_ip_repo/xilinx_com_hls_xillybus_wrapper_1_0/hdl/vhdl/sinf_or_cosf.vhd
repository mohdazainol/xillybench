-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.4
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sinf_or_cosf is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    t_in : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of sinf_or_cosf is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv32_7FFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "01111111111111111111111111111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv9_1C2 : STD_LOGIC_VECTOR (8 downto 0) := "111000010";
    constant ap_const_lv9_3F : STD_LOGIC_VECTOR (8 downto 0) := "000111111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv8_83 : STD_LOGIC_VECTOR (7 downto 0) := "10000011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv49_0 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv13_1FFF : STD_LOGIC_VECTOR (12 downto 0) := "1111111111111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv31_7FFFFFFF : STD_LOGIC_VECTOR (30 downto 0) := "1111111111111111111111111111111";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal hls_ref_4oPi_table_100_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal hls_ref_4oPi_table_100_V_ce0 : STD_LOGIC;
    signal hls_ref_4oPi_table_100_V_q0 : STD_LOGIC_VECTOR (99 downto 0);
    signal hls_sin_cos_K0_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal hls_sin_cos_K0_V_ce0 : STD_LOGIC;
    signal hls_sin_cos_K0_V_q0 : STD_LOGIC_VECTOR (29 downto 0);
    signal hls_sin_cos_K1_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal hls_sin_cos_K1_V_ce0 : STD_LOGIC;
    signal hls_sin_cos_K1_V_q0 : STD_LOGIC_VECTOR (22 downto 0);
    signal hls_sin_cos_K2_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal hls_sin_cos_K2_V_ce0 : STD_LOGIC;
    signal hls_sin_cos_K2_V_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Result_s_reg_915 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_9_fu_357_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_9_reg_921 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_10_fu_367_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_10_reg_928 : STD_LOGIC_VECTOR (22 downto 0);
    signal closepath_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_934 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_410_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_reg_945 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_13_fu_414_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Result_13_reg_950 : STD_LOGIC_VECTOR (23 downto 0);
    signal Med_V_reg_955 : STD_LOGIC_VECTOR (70 downto 0);
    signal p_Val2_9_reg_960 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_big_mult_v3small_71_24_17_s_fu_339_ap_done : STD_LOGIC;
    signal tmp_5_i_reg_966 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_37_fu_474_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_37_reg_971 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_38_fu_576_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Val2_38_reg_976 : STD_LOGIC_VECTOR (30 downto 0);
    signal Ex_V_fu_586_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ex_V_reg_983 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_596_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_reg_988 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_assign_fu_610_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_reg_993 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_s_reg_999 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_6_reg_1004 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_5_reg_1024 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_29_fu_782_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_29_reg_1029 : STD_LOGIC_VECTOR (31 downto 0);
    signal Mx_V_1_fu_788_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal Mx_V_1_reg_1034 : STD_LOGIC_VECTOR (30 downto 0);
    signal r_V_fu_798_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_reg_1039 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_0_reg_1054 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_10_fu_837_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_10_reg_1059 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_31_fu_844_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_31_reg_1064 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_my_to_float_31_1_s_fu_333_ap_done : STD_LOGIC;
    signal p_Result_18_reg_1069 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_862_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_reg_1077 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_my_to_float_31_1_s_fu_333_ap_start : STD_LOGIC;
    signal grp_my_to_float_31_1_s_fu_333_ap_idle : STD_LOGIC;
    signal grp_my_to_float_31_1_s_fu_333_ap_ready : STD_LOGIC;
    signal grp_my_to_float_31_1_s_fu_333_in_V : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_my_to_float_31_1_s_fu_333_prescale : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_my_to_float_31_1_s_fu_333_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_big_mult_v3small_71_24_17_s_fu_339_ap_start : STD_LOGIC;
    signal grp_big_mult_v3small_71_24_17_s_fu_339_ap_idle : STD_LOGIC;
    signal grp_big_mult_v3small_71_24_17_s_fu_339_ap_ready : STD_LOGIC;
    signal grp_big_mult_v3small_71_24_17_s_fu_339_a_V : STD_LOGIC_VECTOR (70 downto 0);
    signal grp_big_mult_v3small_71_24_17_s_fu_339_b_V : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_big_mult_v3small_71_24_17_s_fu_339_ap_return : STD_LOGIC_VECTOR (94 downto 0);
    signal cos_basis_phi_fu_241_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_reg_238 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_reg_259 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_19_fu_856_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ret_i_i_fu_898_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_s_phi_fu_323_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_cond_fu_877_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_fu_882_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_i_i_i_fu_910_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_my_to_float_31_1_s_fu_333_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal grp_big_mult_v3small_71_24_17_s_fu_339_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal tmp_24_i_i_fu_405_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_713_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_35_fu_345_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_cast_fu_371_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_op_i_fu_381_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal addr_V_fu_387_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_1_fu_395_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_25_i_i_fu_422_p1 : STD_LOGIC_VECTOR (99 downto 0);
    signal r_V_3_fu_425_p2 : STD_LOGIC_VECTOR (99 downto 0);
    signal p_i_fu_462_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_20_fu_480_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_i_fu_484_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal p_Val2_15_fu_489_p3 : STD_LOGIC_VECTOR (48 downto 0);
    signal p_Result_i3_i_fu_496_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_14_fu_506_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Result_15_fu_514_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Result_16_fu_524_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_assign_fu_532_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal Mx_zeros_V_fu_540_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_i_fu_544_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal p_Val2_23_fu_548_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_22_fu_564_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_24_fu_554_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_3_i_fu_572_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal storemerge_i_fu_467_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_i_fu_582_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_i_fu_604_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_i_cast_fu_592_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal Ex_V_fu_586_p2_temp: signed (8-1 downto 0);
    signal tmp_8_i_fu_604_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_fu_610_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_10_i_fu_627_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal sh_assign_reg_993_temp: signed (9-1 downto 0);
    signal tmp_10_i_fu_627_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_9_i_fu_624_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_i_fu_636_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_i_cast_fu_632_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_i_fu_636_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_0_i234_in_i_fu_642_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_669_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_26_fu_683_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal OP1_V_3_fu_679_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_26_fu_683_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_26_fu_683_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal sin_basis_fu_699_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_95_fu_649_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_17_fu_705_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_2_fu_735_p0 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Val2_2_fu_735_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_2_fu_735_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal p_Val2_4_fu_758_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_4_fu_758_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Val2_4_fu_758_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_28_fu_720_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_3_fu_741_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Val2_29_fu_782_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_28_fu_720_p3_temp: signed (31-1 downto 0);
    signal p_Val2_29_fu_782_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_741_p4_temp: signed (24-1 downto 0);
    signal r_V_fu_798_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_1024_temp: signed (16-1 downto 0);
    signal grp_fu_809_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_809_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_809_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal Ex_V_1_fu_815_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_837_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal Ex_V_1_fu_815_p3_temp: signed (8-1 downto 0);
    signal tmp_12_fu_872_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_11_fu_867_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_fu_887_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Result_21_fu_890_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_20_fu_903_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_809_ce : STD_LOGIC;
    signal ap_return_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_809_p10 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_Val2_2_fu_735_p10 : STD_LOGIC_VECTOR (39 downto 0);
    signal p_Val2_4_fu_758_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_bdd_301 : BOOLEAN;
    signal ap_sig_bdd_308 : BOOLEAN;

    component my_to_float_31_1_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_V : IN STD_LOGIC_VECTOR (30 downto 0);
        prescale : IN STD_LOGIC_VECTOR (8 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component big_mult_v3small_71_24_17_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a_V : IN STD_LOGIC_VECTOR (70 downto 0);
        b_V : IN STD_LOGIC_VECTOR (23 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (94 downto 0) );
    end component;


    component xillybus_wrapper_mul_32s_31ns_62_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (30 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (61 downto 0) );
    end component;


    component sinf_or_cosf_hls_ref_4oPi_table_100_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (99 downto 0) );
    end component;


    component sinf_or_cosf_hls_sin_cos_K0_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component sinf_or_cosf_hls_sin_cos_K1_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component sinf_or_cosf_hls_sin_cos_K2_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    hls_ref_4oPi_table_100_V_U : component sinf_or_cosf_hls_ref_4oPi_table_100_V
    generic map (
        DataWidth => 100,
        AddressRange => 13,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hls_ref_4oPi_table_100_V_address0,
        ce0 => hls_ref_4oPi_table_100_V_ce0,
        q0 => hls_ref_4oPi_table_100_V_q0);

    hls_sin_cos_K0_V_U : component sinf_or_cosf_hls_sin_cos_K0_V
    generic map (
        DataWidth => 30,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hls_sin_cos_K0_V_address0,
        ce0 => hls_sin_cos_K0_V_ce0,
        q0 => hls_sin_cos_K0_V_q0);

    hls_sin_cos_K1_V_U : component sinf_or_cosf_hls_sin_cos_K1_V
    generic map (
        DataWidth => 23,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hls_sin_cos_K1_V_address0,
        ce0 => hls_sin_cos_K1_V_ce0,
        q0 => hls_sin_cos_K1_V_q0);

    hls_sin_cos_K2_V_U : component sinf_or_cosf_hls_sin_cos_K2_V
    generic map (
        DataWidth => 15,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hls_sin_cos_K2_V_address0,
        ce0 => hls_sin_cos_K2_V_ce0,
        q0 => hls_sin_cos_K2_V_q0);

    grp_my_to_float_31_1_s_fu_333 : component my_to_float_31_1_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_my_to_float_31_1_s_fu_333_ap_start,
        ap_done => grp_my_to_float_31_1_s_fu_333_ap_done,
        ap_idle => grp_my_to_float_31_1_s_fu_333_ap_idle,
        ap_ready => grp_my_to_float_31_1_s_fu_333_ap_ready,
        in_V => grp_my_to_float_31_1_s_fu_333_in_V,
        prescale => grp_my_to_float_31_1_s_fu_333_prescale,
        ap_return => grp_my_to_float_31_1_s_fu_333_ap_return);

    grp_big_mult_v3small_71_24_17_s_fu_339 : component big_mult_v3small_71_24_17_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_big_mult_v3small_71_24_17_s_fu_339_ap_start,
        ap_done => grp_big_mult_v3small_71_24_17_s_fu_339_ap_done,
        ap_idle => grp_big_mult_v3small_71_24_17_s_fu_339_ap_idle,
        ap_ready => grp_big_mult_v3small_71_24_17_s_fu_339_ap_ready,
        a_V => grp_big_mult_v3small_71_24_17_s_fu_339_a_V,
        b_V => grp_big_mult_v3small_71_24_17_s_fu_339_b_V,
        ap_return => grp_big_mult_v3small_71_24_17_s_fu_339_ap_return);

    xillybus_wrapper_mul_32s_31ns_62_3_U12 : component xillybus_wrapper_mul_32s_31ns_62_3
    generic map (
        ID => 12,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 31,
        dout_WIDTH => 62)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_809_p0,
        din1 => grp_fu_809_p1,
        ce => grp_fu_809_ce,
        dout => grp_fu_809_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_return_preg assign process. --
    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv32_0;
            else
                if ((ap_ST_st12_fsm_11 = ap_CS_fsm)) then 
                    ap_return_preg <= p_s_phi_fu_323_p6;
                end if; 
            end if;
        end if;
    end process;


    -- grp_big_mult_v3small_71_24_17_s_fu_339_ap_start_ap_start_reg assign process. --
    grp_big_mult_v3small_71_24_17_s_fu_339_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_big_mult_v3small_71_24_17_s_fu_339_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
                    grp_big_mult_v3small_71_24_17_s_fu_339_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_big_mult_v3small_71_24_17_s_fu_339_ap_ready)) then 
                    grp_big_mult_v3small_71_24_17_s_fu_339_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_my_to_float_31_1_s_fu_333_ap_start_ap_start_reg assign process. --
    grp_my_to_float_31_1_s_fu_333_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_my_to_float_31_1_s_fu_333_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_ST_st10_fsm_9 = ap_CS_fsm)) then 
                    grp_my_to_float_31_1_s_fu_333_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_my_to_float_31_1_s_fu_333_ap_ready)) then 
                    grp_my_to_float_31_1_s_fu_333_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- cos_basis_reg_238 assign process. --
    cos_basis_reg_238_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st5_fsm_4 = ap_CS_fsm) and not((p_Val2_37_reg_971 = ap_const_lv3_5)) and not((p_Val2_37_reg_971 = ap_const_lv3_2)) and not((p_Val2_37_reg_971 = ap_const_lv3_1)) and not((p_Val2_37_reg_971 = ap_const_lv3_6)))) then 
                cos_basis_reg_238 <= ap_const_lv1_0;
            elsif ((((ap_ST_st5_fsm_4 = ap_CS_fsm) and (p_Val2_37_reg_971 = ap_const_lv3_1)) or ((ap_ST_st5_fsm_4 = ap_CS_fsm) and (p_Val2_37_reg_971 = ap_const_lv3_2)) or ((ap_ST_st5_fsm_4 = ap_CS_fsm) and (p_Val2_37_reg_971 = ap_const_lv3_5)) or ((ap_ST_st5_fsm_4 = ap_CS_fsm) and (p_Val2_37_reg_971 = ap_const_lv3_6)))) then 
                cos_basis_reg_238 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    -- tmp_11_reg_259 assign process. --
    tmp_11_reg_259_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_ST_st11_fsm_10 = ap_CS_fsm) and not((ap_const_logic_0 = grp_my_to_float_31_1_s_fu_333_ap_done)) and (ap_const_lv1_0 = cos_basis_reg_238) and not((p_Result_19_fu_856_p3 = ap_const_lv4_7)) and not((p_Result_19_fu_856_p3 = ap_const_lv4_8)) and not((p_Result_19_fu_856_p3 = ap_const_lv4_5)) and not((p_Result_19_fu_856_p3 = ap_const_lv4_4)) and not((p_Result_19_fu_856_p3 = ap_const_lv4_A)) and not((p_Result_19_fu_856_p3 = ap_const_lv4_2)) and not((p_Result_19_fu_856_p3 = ap_const_lv4_B)) and not((p_Result_19_fu_856_p3 = ap_const_lv4_D))) or ((ap_ST_st11_fsm_10 = ap_CS_fsm) and not((ap_const_logic_0 = grp_my_to_float_31_1_s_fu_333_ap_done)) and not((ap_const_lv1_0 = cos_basis_reg_238)) and not((p_Result_19_fu_856_p3 = ap_const_lv4_5)) and not((p_Result_19_fu_856_p3 = ap_const_lv4_4)) and not((p_Result_19_fu_856_p3 = ap_const_lv4_A)) and not((p_Result_19_fu_856_p3 = ap_const_lv4_B)) and not((p_Result_19_fu_856_p3 = ap_const_lv4_9)) and not((p_Result_19_fu_856_p3 = ap_const_lv4_6)) and not((p_Result_19_fu_856_p3 = ap_const_lv4_3)) and not((p_Result_19_fu_856_p3 = ap_const_lv4_C))))) then 
                tmp_11_reg_259 <= ap_const_lv1_0;
            elsif ((((ap_ST_st11_fsm_10 = ap_CS_fsm) and not((ap_const_logic_0 = grp_my_to_float_31_1_s_fu_333_ap_done)) and not((ap_const_lv1_0 = cos_basis_reg_238)) and (p_Result_19_fu_856_p3 = ap_const_lv4_3)) or ((ap_ST_st11_fsm_10 = ap_CS_fsm) and not((ap_const_logic_0 = grp_my_to_float_31_1_s_fu_333_ap_done)) and not((ap_const_lv1_0 = cos_basis_reg_238)) and (p_Result_19_fu_856_p3 = ap_const_lv4_4)) or ((ap_ST_st11_fsm_10 = ap_CS_fsm) and not((ap_const_logic_0 = grp_my_to_float_31_1_s_fu_333_ap_done)) and not((ap_const_lv1_0 = cos_basis_reg_238)) and (p_Result_19_fu_856_p3 = ap_const_lv4_5)) or ((ap_ST_st11_fsm_10 = ap_CS_fsm) and not((ap_const_logic_0 = grp_my_to_float_31_1_s_fu_333_ap_done)) and not((ap_const_lv1_0 = cos_basis_reg_238)) and (p_Result_19_fu_856_p3 = ap_const_lv4_6)) or ((ap_ST_st11_fsm_10 = ap_CS_fsm) and not((ap_const_logic_0 = grp_my_to_float_31_1_s_fu_333_ap_done)) and not((ap_const_lv1_0 = cos_basis_reg_238)) and (p_Result_19_fu_856_p3 = ap_const_lv4_9)) or ((ap_ST_st11_fsm_10 = ap_CS_fsm) and not((ap_const_logic_0 = grp_my_to_float_31_1_s_fu_333_ap_done)) and not((ap_const_lv1_0 = cos_basis_reg_238)) and (p_Result_19_fu_856_p3 = ap_const_lv4_A)) or ((ap_ST_st11_fsm_10 = ap_CS_fsm) and not((ap_const_logic_0 = grp_my_to_float_31_1_s_fu_333_ap_done)) and not((ap_const_lv1_0 = cos_basis_reg_238)) and (p_Result_19_fu_856_p3 = ap_const_lv4_B)) or ((ap_ST_st11_fsm_10 = ap_CS_fsm) and not((ap_const_logic_0 = grp_my_to_float_31_1_s_fu_333_ap_done)) and not((ap_const_lv1_0 = cos_basis_reg_238)) and (p_Result_19_fu_856_p3 = ap_const_lv4_C)) or ((ap_ST_st11_fsm_10 = ap_CS_fsm) and not((ap_const_logic_0 = grp_my_to_float_31_1_s_fu_333_ap_done)) and (ap_const_lv1_0 = cos_basis_reg_238) and (p_Result_19_fu_856_p3 = ap_const_lv4_2)) or ((ap_ST_st11_fsm_10 = ap_CS_fsm) and not((ap_const_logic_0 = grp_my_to_float_31_1_s_fu_333_ap_done)) and (ap_const_lv1_0 = cos_basis_reg_238) and (p_Result_19_fu_856_p3 = ap_const_lv4_4)) or ((ap_ST_st11_fsm_10 = ap_CS_fsm) and not((ap_const_logic_0 = grp_my_to_float_31_1_s_fu_333_ap_done)) and (ap_const_lv1_0 = cos_basis_reg_238) and (p_Result_19_fu_856_p3 = ap_const_lv4_5)) or ((ap_ST_st11_fsm_10 = ap_CS_fsm) and not((ap_const_logic_0 = grp_my_to_float_31_1_s_fu_333_ap_done)) and (ap_const_lv1_0 = cos_basis_reg_238) and (p_Result_19_fu_856_p3 = ap_const_lv4_7)) or ((ap_ST_st11_fsm_10 = ap_CS_fsm) and not((ap_const_logic_0 = grp_my_to_float_31_1_s_fu_333_ap_done)) and (ap_const_lv1_0 = cos_basis_reg_238) and (p_Result_19_fu_856_p3 = ap_const_lv4_8)) or ((ap_ST_st11_fsm_10 = ap_CS_fsm) and not((ap_const_logic_0 = grp_my_to_float_31_1_s_fu_333_ap_done)) and (ap_const_lv1_0 = cos_basis_reg_238) and (p_Result_19_fu_856_p3 = ap_const_lv4_A)) or ((ap_ST_st11_fsm_10 = ap_CS_fsm) and not((ap_const_logic_0 = grp_my_to_float_31_1_s_fu_333_ap_done)) and (ap_const_lv1_0 = cos_basis_reg_238) and (p_Result_19_fu_856_p3 = ap_const_lv4_B)) or ((ap_ST_st11_fsm_10 = ap_CS_fsm) and not((ap_const_logic_0 = grp_my_to_float_31_1_s_fu_333_ap_done)) and (ap_const_lv1_0 = cos_basis_reg_238) and (p_Result_19_fu_856_p3 = ap_const_lv4_D)))) then 
                tmp_11_reg_259 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then
                Ex_V_reg_983 <= Ex_V_fu_586_p2;
                isNeg_reg_988 <= Ex_V_fu_586_p2(7 downto 7);
                p_Val2_37_reg_971 <= p_Val2_37_fu_474_p3;
                p_Val2_38_reg_976 <= p_Val2_38_fu_576_p2;
                sh_assign_reg_993 <= sh_assign_fu_610_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then
                Med_V_reg_955 <= r_V_3_fu_425_p2(99 downto 29);
                p_Result_13_reg_950(0) <= p_Result_13_fu_414_p3(0);
    p_Result_13_reg_950(1) <= p_Result_13_fu_414_p3(1);
    p_Result_13_reg_950(2) <= p_Result_13_fu_414_p3(2);
    p_Result_13_reg_950(3) <= p_Result_13_fu_414_p3(3);
    p_Result_13_reg_950(4) <= p_Result_13_fu_414_p3(4);
    p_Result_13_reg_950(5) <= p_Result_13_fu_414_p3(5);
    p_Result_13_reg_950(6) <= p_Result_13_fu_414_p3(6);
    p_Result_13_reg_950(7) <= p_Result_13_fu_414_p3(7);
    p_Result_13_reg_950(8) <= p_Result_13_fu_414_p3(8);
    p_Result_13_reg_950(9) <= p_Result_13_fu_414_p3(9);
    p_Result_13_reg_950(10) <= p_Result_13_fu_414_p3(10);
    p_Result_13_reg_950(11) <= p_Result_13_fu_414_p3(11);
    p_Result_13_reg_950(12) <= p_Result_13_fu_414_p3(12);
    p_Result_13_reg_950(13) <= p_Result_13_fu_414_p3(13);
    p_Result_13_reg_950(14) <= p_Result_13_fu_414_p3(14);
    p_Result_13_reg_950(15) <= p_Result_13_fu_414_p3(15);
    p_Result_13_reg_950(16) <= p_Result_13_fu_414_p3(16);
    p_Result_13_reg_950(17) <= p_Result_13_fu_414_p3(17);
    p_Result_13_reg_950(18) <= p_Result_13_fu_414_p3(18);
    p_Result_13_reg_950(19) <= p_Result_13_fu_414_p3(19);
    p_Result_13_reg_950(20) <= p_Result_13_fu_414_p3(20);
    p_Result_13_reg_950(21) <= p_Result_13_fu_414_p3(21);
    p_Result_13_reg_950(22) <= p_Result_13_fu_414_p3(22);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st7_fsm_6 = ap_CS_fsm)) then
                Mx_V_1_reg_1034 <= Mx_V_1_fu_788_p3;
                r_V_reg_1039 <= r_V_fu_798_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then
                closepath_reg_934 <= closepath_fu_375_p2;
                p_Result_10_reg_928 <= p_Result_10_fu_367_p1;
                p_Result_9_reg_921 <= p_Val2_35_fu_345_p1(30 downto 23);
                p_Result_s_reg_915 <= p_Val2_35_fu_345_p1(31 downto 31);
                tmp_reg_945 <= tmp_fu_410_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st10_fsm_9 = ap_CS_fsm)) then
                p_0_reg_1054 <= grp_fu_809_p2(61 downto 31);
                tmp_10_reg_1059 <= tmp_10_fu_837_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st11_fsm_10 = ap_CS_fsm) and not((ap_const_logic_0 = grp_my_to_float_31_1_s_fu_333_ap_done)))) then
                p_Result_18_reg_1069 <= p_Val2_31_fu_844_p1(31 downto 31);
                p_Val2_31_reg_1064 <= p_Val2_31_fu_844_p1;
                tmp_13_reg_1077 <= tmp_13_fu_862_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then
                p_Val2_29_reg_1029 <= p_Val2_29_fu_782_p2;
                tmp_5_reg_1024 <= p_Val2_4_fu_758_p2(31 downto 16);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((ap_const_logic_0 = grp_big_mult_v3small_71_24_17_s_fu_339_ap_done)))) then
                p_Val2_9_reg_960 <= grp_big_mult_v3small_71_24_17_s_fu_339_ap_return(67 downto 19);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st5_fsm_4 = ap_CS_fsm)) then
                p_Val2_s_reg_999 <= p_Val2_0_i234_in_i_fu_642_p3(23 downto 7);
                tmp_6_reg_1004 <= p_Val2_26_fu_683_p2(17 downto 1);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((ap_const_logic_0 = grp_big_mult_v3small_71_24_17_s_fu_339_ap_done)) and (closepath_reg_934 = ap_const_lv1_0))) then
                tmp_5_i_reg_966 <= grp_big_mult_v3small_71_24_17_s_fu_339_ap_return(70 downto 68);
            end if;
        end if;
    end process;
    p_Result_13_reg_950(23) <= '1';

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start , ap_CS_fsm , grp_big_mult_v3small_71_24_17_s_fu_339_ap_done , grp_my_to_float_31_1_s_fu_333_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_logic_0 = grp_big_mult_v3small_71_24_17_s_fu_339_ap_done))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                if (not((ap_const_logic_0 = grp_my_to_float_31_1_s_fu_333_ap_done))) then
                    ap_NS_fsm <= ap_ST_st12_fsm_11;
                else
                    ap_NS_fsm <= ap_ST_st11_fsm_10;
                end if;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    Ex_V_1_fu_815_p3 <= 
        ap_const_lv8_0 when (cos_basis_reg_238(0) = '1') else 
        Ex_V_reg_983;
    Ex_V_fu_586_p2 <= std_logic_vector(unsigned(storemerge_i_fu_467_p3) - unsigned(tmp_6_i_fu_582_p1));
    Mx_V_1_fu_788_p3 <= 
        ap_const_lv31_7FFFFFFF when (cos_basis_reg_238(0) = '1') else 
        p_Val2_38_reg_976;
    Mx_zeros_V_fu_540_p1 <= val_assign_fu_532_p3(5 - 1 downto 0);
    OP1_V_3_fu_679_p1 <= std_logic_vector(resize(unsigned(tmp_s_fu_669_p4),18));
    addr_V_fu_387_p3 <= 
        ap_const_lv9_3F when (closepath_fu_375_p2(0) = '1') else 
        p_op_i_fu_381_p2;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm)) or (ap_ST_st12_fsm_11 = ap_CS_fsm))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st12_fsm_11 = ap_CS_fsm)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_return assign process. --
    ap_return_assign_proc : process(ap_CS_fsm, p_s_phi_fu_323_p6, ap_return_preg)
    begin
        if ((ap_ST_st12_fsm_11 = ap_CS_fsm)) then 
            ap_return <= p_s_phi_fu_323_p6;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;


    -- ap_sig_bdd_301 assign process. --
    ap_sig_bdd_301_assign_proc : process(or_cond_fu_877_p2, tmp_i_fu_882_p2)
    begin
                ap_sig_bdd_301 <= ((ap_const_lv1_0 = or_cond_fu_877_p2) and (ap_const_lv1_0 = tmp_i_fu_882_p2));
    end process;


    -- ap_sig_bdd_308 assign process. --
    ap_sig_bdd_308_assign_proc : process(or_cond_fu_877_p2, tmp_i_fu_882_p2)
    begin
                ap_sig_bdd_308 <= ((ap_const_lv1_0 = or_cond_fu_877_p2) and not((ap_const_lv1_0 = tmp_i_fu_882_p2)));
    end process;

    closepath_fu_375_p2 <= "1" when (unsigned(p_Result_9_fu_357_p4) < unsigned(ap_const_lv8_7E)) else "0";

    -- cos_basis_phi_fu_241_p10 assign process. --
    cos_basis_phi_fu_241_p10_assign_proc : process(ap_CS_fsm, p_Val2_37_reg_971)
    begin
        if (((ap_ST_st5_fsm_4 = ap_CS_fsm) and not((p_Val2_37_reg_971 = ap_const_lv3_5)) and not((p_Val2_37_reg_971 = ap_const_lv3_2)) and not((p_Val2_37_reg_971 = ap_const_lv3_1)) and not((p_Val2_37_reg_971 = ap_const_lv3_6)))) then 
            cos_basis_phi_fu_241_p10 <= ap_const_lv1_0;
        elsif ((((ap_ST_st5_fsm_4 = ap_CS_fsm) and (p_Val2_37_reg_971 = ap_const_lv3_1)) or ((ap_ST_st5_fsm_4 = ap_CS_fsm) and (p_Val2_37_reg_971 = ap_const_lv3_2)) or ((ap_ST_st5_fsm_4 = ap_CS_fsm) and (p_Val2_37_reg_971 = ap_const_lv3_5)) or ((ap_ST_st5_fsm_4 = ap_CS_fsm) and (p_Val2_37_reg_971 = ap_const_lv3_6)))) then 
            cos_basis_phi_fu_241_p10 <= ap_const_lv1_1;
        else 
            cos_basis_phi_fu_241_p10 <= "X";
        end if; 
    end process;

    grp_big_mult_v3small_71_24_17_s_fu_339_a_V <= Med_V_reg_955;
    grp_big_mult_v3small_71_24_17_s_fu_339_ap_start <= grp_big_mult_v3small_71_24_17_s_fu_339_ap_start_ap_start_reg;
    grp_big_mult_v3small_71_24_17_s_fu_339_b_V <= p_Result_13_reg_950;
    grp_fu_809_ce <= ap_const_logic_1;
    grp_fu_809_p0 <= r_V_reg_1039;
    grp_fu_809_p1 <= grp_fu_809_p10(31 - 1 downto 0);
    grp_fu_809_p10 <= std_logic_vector(resize(unsigned(Mx_V_1_reg_1034),62));
    grp_my_to_float_31_1_s_fu_333_ap_start <= grp_my_to_float_31_1_s_fu_333_ap_start_ap_start_reg;
    grp_my_to_float_31_1_s_fu_333_in_V <= p_0_reg_1054;
    grp_my_to_float_31_1_s_fu_333_prescale <= tmp_10_reg_1059;
    hls_ref_4oPi_table_100_V_address0 <= tmp_24_i_i_fu_405_p1(4 - 1 downto 0);

    -- hls_ref_4oPi_table_100_V_ce0 assign process. --
    hls_ref_4oPi_table_100_V_ce0_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then 
            hls_ref_4oPi_table_100_V_ce0 <= ap_const_logic_1;
        else 
            hls_ref_4oPi_table_100_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    hls_sin_cos_K0_V_address0 <= tmp_7_fu_713_p1(8 - 1 downto 0);

    -- hls_sin_cos_K0_V_ce0 assign process. --
    hls_sin_cos_K0_V_ce0_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st5_fsm_4 = ap_CS_fsm)) then 
            hls_sin_cos_K0_V_ce0 <= ap_const_logic_1;
        else 
            hls_sin_cos_K0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    hls_sin_cos_K1_V_address0 <= tmp_7_fu_713_p1(8 - 1 downto 0);

    -- hls_sin_cos_K1_V_ce0 assign process. --
    hls_sin_cos_K1_V_ce0_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st5_fsm_4 = ap_CS_fsm)) then 
            hls_sin_cos_K1_V_ce0 <= ap_const_logic_1;
        else 
            hls_sin_cos_K1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    hls_sin_cos_K2_V_address0 <= tmp_7_fu_713_p1(8 - 1 downto 0);

    -- hls_sin_cos_K2_V_ce0 assign process. --
    hls_sin_cos_K2_V_ce0_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st5_fsm_4 = ap_CS_fsm)) then 
            hls_sin_cos_K2_V_ce0 <= ap_const_logic_1;
        else 
            hls_sin_cos_K2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    isNeg_fu_596_p3 <= Ex_V_fu_586_p2(7 downto 7);
    or_cond_fu_877_p2 <= (tmp_12_fu_872_p2 and tmp_13_reg_1077);
    p_Result_10_fu_367_p1 <= p_Val2_35_fu_345_p1(23 - 1 downto 0);
    p_Result_11_fu_867_p2 <= (tmp_11_reg_259 or p_Result_18_reg_1069);
    p_Result_13_fu_414_p3 <= (ap_const_lv1_1 & p_Result_10_reg_928);
    p_Result_14_fu_506_p3 <= (p_Result_i3_i_fu_496_p4 & ap_const_lv1_1);
    
    p_Result_15_fu_514_p4_proc : process(p_Result_14_fu_506_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(19+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(19+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(19 - 1 downto 0);
    variable p_Result_15_fu_514_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(19 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(19 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(19 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_12(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Result_14_fu_506_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(19-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(19-1-unsigned(ap_const_lv32_12(5-1 downto 0)));
            for p_Result_15_fu_514_p4_i in 0 to 19-1 loop
                v0_cpy(p_Result_15_fu_514_p4_i) := p_Result_14_fu_506_p3(19-1-p_Result_15_fu_514_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy),to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(19-1 downto 0)))));
        res_mask := res_mask(19-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_15_fu_514_p4 <= resvalue(19-1 downto 0);
    end process;

    p_Result_16_fu_524_p3 <= (ap_const_lv13_1FFF & p_Result_15_fu_514_p4);
    p_Result_17_fu_705_p3 <= (sin_basis_fu_699_p2 & p_Result_s_95_fu_649_p4);
    p_Result_19_fu_856_p3 <= (p_Result_s_reg_915 & p_Val2_37_reg_971);
    p_Result_20_fu_903_p3 <= (p_Result_s_reg_915 & ap_const_lv31_0);
    p_Result_21_fu_890_p3 <= (p_Result_11_fu_867_p2 & tmp_25_fu_887_p1);
    p_Result_9_fu_357_p4 <= p_Val2_35_fu_345_p1(30 downto 23);
    p_Result_i3_i_fu_496_p4 <= p_Val2_15_fu_489_p3(48 downto 31);
    p_Result_s_95_fu_649_p4 <= p_Val2_0_i234_in_i_fu_642_p3(30 downto 24);
    p_Val2_0_i234_in_i_fu_642_p3 <= 
        tmp_10_i_cast_fu_632_p1 when (isNeg_reg_988(0) = '1') else 
        tmp_12_i_fu_636_p2;
    p_Val2_15_fu_489_p3 <= 
        p_Val2_i_fu_484_p2 when (tmp_20_fu_480_p1(0) = '1') else 
        p_Val2_9_reg_960;
    p_Val2_23_fu_548_p2 <= std_logic_vector(shift_left(unsigned(p_Val2_15_fu_489_p3),to_integer(unsigned('0' & tmp_1_i_fu_544_p1(31-1 downto 0)))));
    p_Val2_24_fu_554_p4 <= p_Val2_23_fu_548_p2(48 downto 18);
    p_Val2_26_fu_683_p0 <= OP1_V_3_fu_679_p1(9 - 1 downto 0);
    p_Val2_26_fu_683_p1 <= OP1_V_3_fu_679_p1(9 - 1 downto 0);
    p_Val2_26_fu_683_p2 <= std_logic_vector(resize(unsigned(p_Val2_26_fu_683_p0) * unsigned(p_Val2_26_fu_683_p1), 18));
    p_Val2_28_fu_720_p3 <= (hls_sin_cos_K0_V_q0 & ap_const_lv1_0);
    
    p_Val2_28_fu_720_p3_temp <= signed(p_Val2_28_fu_720_p3);
    p_Val2_29_fu_782_p0 <= std_logic_vector(resize(p_Val2_28_fu_720_p3_temp,32));

    
    tmp_3_fu_741_p4_temp <= signed(tmp_3_fu_741_p4);
    p_Val2_29_fu_782_p1 <= std_logic_vector(resize(tmp_3_fu_741_p4_temp,32));

    p_Val2_29_fu_782_p2 <= std_logic_vector(unsigned(p_Val2_29_fu_782_p0) + unsigned(p_Val2_29_fu_782_p1));
    p_Val2_2_fu_735_p0 <= hls_sin_cos_K1_V_q0;
    p_Val2_2_fu_735_p1 <= p_Val2_2_fu_735_p10(17 - 1 downto 0);
    p_Val2_2_fu_735_p10 <= std_logic_vector(resize(unsigned(p_Val2_s_reg_999),40));
    p_Val2_2_fu_735_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(p_Val2_2_fu_735_p0) * signed('0' &p_Val2_2_fu_735_p1))), 40));
    p_Val2_31_fu_844_p1 <= grp_my_to_float_31_1_s_fu_333_ap_return;
    p_Val2_35_fu_345_p1 <= t_in;
    p_Val2_37_fu_474_p3 <= 
        ap_const_lv3_0 when (closepath_reg_934(0) = '1') else 
        tmp_5_i_reg_966;
    p_Val2_38_fu_576_p2 <= std_logic_vector(unsigned(p_Val2_24_fu_554_p4) + unsigned(tmp_3_i_fu_572_p1));
    p_Val2_4_fu_758_p0 <= p_Val2_4_fu_758_p00(17 - 1 downto 0);
    p_Val2_4_fu_758_p00 <= std_logic_vector(resize(unsigned(tmp_6_reg_1004),32));
    p_Val2_4_fu_758_p1 <= hls_sin_cos_K2_V_q0;
    p_Val2_4_fu_758_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed('0' &p_Val2_4_fu_758_p0) * signed(p_Val2_4_fu_758_p1))), 32));
    p_Val2_i_fu_484_p2 <= std_logic_vector(unsigned(ap_const_lv49_0) - unsigned(p_Val2_9_reg_960));
    p_i_fu_462_p2 <= std_logic_vector(unsigned(p_Result_9_reg_921) + unsigned(ap_const_lv8_83));
    p_op_i_fu_381_p2 <= std_logic_vector(unsigned(tmp_i_i_cast_fu_371_p1) + unsigned(ap_const_lv9_1C2));

    -- p_s_phi_fu_323_p6 assign process. --
    p_s_phi_fu_323_p6_assign_proc : process(ap_CS_fsm, ret_i_i_fu_898_p1, or_cond_fu_877_p2, ret_i_i_i_fu_910_p1, ap_sig_bdd_301, ap_sig_bdd_308)
    begin
        if ((ap_ST_st12_fsm_11 = ap_CS_fsm)) then
            if (ap_sig_bdd_308) then 
                p_s_phi_fu_323_p6 <= ap_const_lv32_7FFFFFFF;
            elsif (not((ap_const_lv1_0 = or_cond_fu_877_p2))) then 
                p_s_phi_fu_323_p6 <= ret_i_i_i_fu_910_p1;
            elsif (ap_sig_bdd_301) then 
                p_s_phi_fu_323_p6 <= ret_i_i_fu_898_p1;
            else 
                p_s_phi_fu_323_p6 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            p_s_phi_fu_323_p6 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    r_V_1_fu_395_p4 <= addr_V_fu_387_p3(8 downto 4);
    r_V_3_fu_425_p2 <= std_logic_vector(shift_left(unsigned(hls_ref_4oPi_table_100_V_q0),to_integer(unsigned('0' & tmp_25_i_i_fu_422_p1(31-1 downto 0)))));
    
    tmp_5_reg_1024_temp <= signed(tmp_5_reg_1024);
    r_V_fu_798_p1 <= std_logic_vector(resize(tmp_5_reg_1024_temp,32));

    r_V_fu_798_p2 <= std_logic_vector(unsigned(p_Val2_29_reg_1029) + unsigned(r_V_fu_798_p1));
    ret_i_i_fu_898_p1 <= p_Result_21_fu_890_p3;
    ret_i_i_i_fu_910_p1 <= p_Result_20_fu_903_p3;
    sh_assign_fu_610_p2 <= sh_i_cast_fu_592_p1;
    sh_assign_fu_610_p3 <= 
        tmp_8_i_fu_604_p2 when (isNeg_fu_596_p3(0) = '1') else 
        sh_assign_fu_610_p2;
    
    Ex_V_fu_586_p2_temp <= signed(Ex_V_fu_586_p2);
    sh_i_cast_fu_592_p1 <= std_logic_vector(resize(Ex_V_fu_586_p2_temp,9));

    sin_basis_fu_699_p2 <= (cos_basis_phi_fu_241_p10 xor ap_const_lv1_1);
    storemerge_i_fu_467_p3 <= 
        p_i_fu_462_p2 when (closepath_reg_934(0) = '1') else 
        ap_const_lv8_0;
    
    Ex_V_1_fu_815_p3_temp <= signed(Ex_V_1_fu_815_p3);
    tmp_10_fu_837_p1 <= std_logic_vector(resize(Ex_V_1_fu_815_p3_temp,9));

    tmp_10_fu_837_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(tmp_10_fu_837_p1));
    tmp_10_i_cast_fu_632_p1 <= std_logic_vector(resize(unsigned(tmp_10_i_fu_627_p2),32));
    
    sh_assign_reg_993_temp <= signed(sh_assign_reg_993);
    tmp_10_i_fu_627_p1 <= std_logic_vector(resize(sh_assign_reg_993_temp,31));

    tmp_10_i_fu_627_p2 <= std_logic_vector(shift_right(unsigned(p_Val2_38_reg_976),to_integer(unsigned('0' & tmp_10_i_fu_627_p1(31-1 downto 0)))));
    tmp_12_fu_872_p2 <= "1" when (p_Result_9_reg_921 = ap_const_lv8_0) else "0";
    
    sh_assign_reg_993_temp <= signed(sh_assign_reg_993);
    tmp_12_i_fu_636_p1 <= std_logic_vector(resize(sh_assign_reg_993_temp,32));

    tmp_12_i_fu_636_p2 <= std_logic_vector(shift_left(unsigned(tmp_9_i_fu_624_p1),to_integer(unsigned('0' & tmp_12_i_fu_636_p1(31-1 downto 0)))));
    tmp_13_fu_862_p2 <= "1" when (p_Result_10_reg_928 = ap_const_lv23_0) else "0";
    tmp_1_i_fu_544_p1 <= std_logic_vector(resize(unsigned(Mx_zeros_V_fu_540_p1),49));
    tmp_20_fu_480_p1 <= p_Val2_37_fu_474_p3(1 - 1 downto 0);
    tmp_22_fu_564_p3 <= p_Val2_23_fu_548_p2(17 downto 17);
    tmp_24_i_i_fu_405_p1 <= std_logic_vector(resize(unsigned(r_V_1_fu_395_p4),64));
    tmp_25_fu_887_p1 <= p_Val2_31_reg_1064(31 - 1 downto 0);
    tmp_25_i_i_fu_422_p1 <= std_logic_vector(resize(unsigned(tmp_reg_945),100));
    tmp_3_fu_741_p4 <= p_Val2_2_fu_735_p2(39 downto 16);
    tmp_3_i_fu_572_p1 <= std_logic_vector(resize(unsigned(tmp_22_fu_564_p3),31));
    tmp_6_i_fu_582_p1 <= std_logic_vector(resize(unsigned(Mx_zeros_V_fu_540_p1),8));
    tmp_7_fu_713_p1 <= std_logic_vector(resize(unsigned(p_Result_17_fu_705_p3),64));
    tmp_8_i_fu_604_p1 <= sh_i_cast_fu_592_p1;
    tmp_8_i_fu_604_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(tmp_8_i_fu_604_p1));
    tmp_9_i_fu_624_p1 <= std_logic_vector(resize(unsigned(p_Val2_38_reg_976),32));
    tmp_fu_410_p1 <= addr_V_fu_387_p3(4 - 1 downto 0);
    tmp_i_fu_882_p2 <= "1" when (p_Result_9_reg_921 = ap_const_lv8_FF) else "0";
    tmp_i_i_cast_fu_371_p1 <= std_logic_vector(resize(unsigned(p_Result_9_fu_357_p4),9));
    tmp_s_fu_669_p4 <= p_Val2_0_i234_in_i_fu_642_p3(23 downto 15);
    
    val_assign_fu_532_p3_proc : process(p_Result_16_fu_524_p3)
    begin
        val_assign_fu_532_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_16_fu_524_p3(i) = '1' then
                val_assign_fu_532_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

end behav;
