-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.4
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity my_to_float_31_1_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_V : IN STD_LOGIC_VECTOR (30 downto 0);
    prescale : IN STD_LOGIC_VECTOR (8 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of my_to_float_31_1_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_bits_0_V_fu_183_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_bits_0_V_reg_422 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_207_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_reg_427 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_225_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal c_0_1_fu_249_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_0_2_fu_257_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_fu_273_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal shift_2_fu_291_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_fu_265_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_shift_V_fu_344_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal c_0_s_reg_78 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_1_s_reg_90 : STD_LOGIC_VECTOR (31 downto 0);
    signal i1_reg_102 : STD_LOGIC_VECTOR (1 downto 0);
    signal in_shift_reg_113 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_16_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shift_reg_122 : STD_LOGIC_VECTOR (31 downto 0);
    signal i2_reg_133 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_Val2_in_phi_fu_147_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal shift_1_phi_fu_157_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_1_fu_165_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_175_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_26_fu_195_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_2_fu_199_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_28_fu_231_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_bits_0_V_1_fu_235_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_1_fu_241_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_fu_279_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_assign_fu_283_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal isNeg_fu_298_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_306_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_324_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_320_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_shift_reg_113_temp: signed (31-1 downto 0);
    signal sh_assign_1_fu_312_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_330_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_324_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_330_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal storemerge_in_fu_336_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_fu_370_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_fu_373_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_33_fu_379_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_17_fu_365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp_fu_383_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_exp_V_fu_389_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_s_fu_355_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_22_fu_397_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_write_assign_fu_407_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_bdd_80 : BOOLEAN;


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_return_preg assign process. --
    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg(0) <= '0';
                ap_return_preg(1) <= '0';
                ap_return_preg(2) <= '0';
                ap_return_preg(3) <= '0';
                ap_return_preg(4) <= '0';
                ap_return_preg(5) <= '0';
                ap_return_preg(6) <= '0';
                ap_return_preg(7) <= '0';
                ap_return_preg(8) <= '0';
                ap_return_preg(9) <= '0';
                ap_return_preg(10) <= '0';
                ap_return_preg(11) <= '0';
                ap_return_preg(12) <= '0';
                ap_return_preg(13) <= '0';
                ap_return_preg(14) <= '0';
                ap_return_preg(15) <= '0';
                ap_return_preg(16) <= '0';
                ap_return_preg(17) <= '0';
                ap_return_preg(18) <= '0';
                ap_return_preg(19) <= '0';
                ap_return_preg(20) <= '0';
                ap_return_preg(21) <= '0';
                ap_return_preg(22) <= '0';
                ap_return_preg(23) <= '0';
                ap_return_preg(24) <= '0';
                ap_return_preg(25) <= '0';
                ap_return_preg(26) <= '0';
                ap_return_preg(27) <= '0';
                ap_return_preg(28) <= '0';
                ap_return_preg(29) <= '0';
                ap_return_preg(30) <= '0';
            else
                if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and ((ap_const_lv1_0 = tmp_16_fu_349_p2) or not((ap_const_lv1_0 = tmp_27_fu_265_p3))))) then 
                    ap_return_preg(0) <= result_write_assign_fu_407_p1(0);
                    ap_return_preg(1) <= result_write_assign_fu_407_p1(1);
                    ap_return_preg(2) <= result_write_assign_fu_407_p1(2);
                    ap_return_preg(3) <= result_write_assign_fu_407_p1(3);
                    ap_return_preg(4) <= result_write_assign_fu_407_p1(4);
                    ap_return_preg(5) <= result_write_assign_fu_407_p1(5);
                    ap_return_preg(6) <= result_write_assign_fu_407_p1(6);
                    ap_return_preg(7) <= result_write_assign_fu_407_p1(7);
                    ap_return_preg(8) <= result_write_assign_fu_407_p1(8);
                    ap_return_preg(9) <= result_write_assign_fu_407_p1(9);
                    ap_return_preg(10) <= result_write_assign_fu_407_p1(10);
                    ap_return_preg(11) <= result_write_assign_fu_407_p1(11);
                    ap_return_preg(12) <= result_write_assign_fu_407_p1(12);
                    ap_return_preg(13) <= result_write_assign_fu_407_p1(13);
                    ap_return_preg(14) <= result_write_assign_fu_407_p1(14);
                    ap_return_preg(15) <= result_write_assign_fu_407_p1(15);
                    ap_return_preg(16) <= result_write_assign_fu_407_p1(16);
                    ap_return_preg(17) <= result_write_assign_fu_407_p1(17);
                    ap_return_preg(18) <= result_write_assign_fu_407_p1(18);
                    ap_return_preg(19) <= result_write_assign_fu_407_p1(19);
                    ap_return_preg(20) <= result_write_assign_fu_407_p1(20);
                    ap_return_preg(21) <= result_write_assign_fu_407_p1(21);
                    ap_return_preg(22) <= result_write_assign_fu_407_p1(22);
                    ap_return_preg(23) <= result_write_assign_fu_407_p1(23);
                    ap_return_preg(24) <= result_write_assign_fu_407_p1(24);
                    ap_return_preg(25) <= result_write_assign_fu_407_p1(25);
                    ap_return_preg(26) <= result_write_assign_fu_407_p1(26);
                    ap_return_preg(27) <= result_write_assign_fu_407_p1(27);
                    ap_return_preg(28) <= result_write_assign_fu_407_p1(28);
                    ap_return_preg(29) <= result_write_assign_fu_407_p1(29);
                    ap_return_preg(30) <= result_write_assign_fu_407_p1(30);
                end if; 
            end if;
        end if;
    end process;


    -- i1_reg_102 assign process. --
    i1_reg_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (exitcond_fu_219_p2 = ap_const_lv1_0))) then 
                i1_reg_102 <= i_fu_225_p2;
            elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then 
                i1_reg_102 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    -- i2_reg_133 assign process. --
    i2_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((exitcond_fu_219_p2 = ap_const_lv1_0)))) then 
                i2_reg_133 <= ap_const_lv2_0;
            elsif (((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_27_fu_265_p3) and not((ap_const_lv1_0 = tmp_16_fu_349_p2)))) then 
                i2_reg_133 <= i_1_fu_273_p2;
            end if; 
        end if;
    end process;

    -- in_shift_reg_113 assign process. --
    in_shift_reg_113_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((exitcond_fu_219_p2 = ap_const_lv1_0)))) then 
                in_shift_reg_113 <= in_V;
            elsif (((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_27_fu_265_p3) and not((ap_const_lv1_0 = tmp_16_fu_349_p2)))) then 
                in_shift_reg_113 <= in_shift_V_fu_344_p1;
            end if; 
        end if;
    end process;

    -- shift_reg_122 assign process. --
    shift_reg_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((exitcond_fu_219_p2 = ap_const_lv1_0)))) then 
                shift_reg_122 <= ap_const_lv32_0;
            elsif (((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_27_fu_265_p3) and not((ap_const_lv1_0 = tmp_16_fu_349_p2)))) then 
                shift_reg_122 <= shift_2_fu_291_p2;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (exitcond_fu_219_p2 = ap_const_lv1_0))) then
                c_0_s_reg_78 <= c_0_1_fu_249_p3;
                c_1_s_reg_90 <= c_0_2_fu_257_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then
                out_bits_0_V_reg_422 <= out_bits_0_V_fu_183_p5;
                p_Result_s_reg_427 <= p_Result_s_fu_207_p5;
            end if;
        end if;
    end process;
    ap_return_preg(31) <= '0';

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start , ap_CS_fsm , exitcond_fu_219_p2 , tmp_27_fu_265_p3 , tmp_16_fu_349_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((exitcond_fu_219_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (((ap_const_lv1_0 = tmp_16_fu_349_p2) or not((ap_const_lv1_0 = tmp_27_fu_265_p3)))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_CS_fsm, tmp_27_fu_265_p3, tmp_16_fu_349_p2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm)) or ((ap_ST_st3_fsm_2 = ap_CS_fsm) and ((ap_const_lv1_0 = tmp_16_fu_349_p2) or not((ap_const_lv1_0 = tmp_27_fu_265_p3)))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm, tmp_27_fu_265_p3, tmp_16_fu_349_p2)
    begin
        if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and ((ap_const_lv1_0 = tmp_16_fu_349_p2) or not((ap_const_lv1_0 = tmp_27_fu_265_p3))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_return assign process. --
    ap_return_assign_proc : process(ap_CS_fsm, tmp_27_fu_265_p3, tmp_16_fu_349_p2, result_write_assign_fu_407_p1, ap_return_preg)
    begin
        if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and ((ap_const_lv1_0 = tmp_16_fu_349_p2) or not((ap_const_lv1_0 = tmp_27_fu_265_p3))))) then 
            ap_return <= result_write_assign_fu_407_p1;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;


    -- ap_sig_bdd_80 assign process. --
    ap_sig_bdd_80_assign_proc : process(tmp_27_fu_265_p3, tmp_16_fu_349_p2)
    begin
                ap_sig_bdd_80 <= ((ap_const_lv1_0 = tmp_27_fu_265_p3) and (ap_const_lv1_0 = tmp_16_fu_349_p2));
    end process;

    c_0_1_fu_249_p3 <= 
        c_0_s_reg_78 when (tmp_28_fu_231_p1(0) = '1') else 
        c_1_fu_241_p3;
    c_0_2_fu_257_p3 <= 
        c_1_fu_241_p3 when (tmp_28_fu_231_p1(0) = '1') else 
        c_1_s_reg_90;
    
    c_1_fu_241_p3_proc : process(out_bits_0_V_1_fu_235_p3)
    begin
        c_1_fu_241_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 32 - 1 downto 0 loop
            if out_bits_0_V_1_fu_235_p3(i) = '1' then
                c_1_fu_241_p3 <= std_logic_vector(to_unsigned(32-1-i,32));
                exit;
            end if;
        end loop;
    end process;

    exitcond_fu_219_p2 <= "1" when (i1_reg_102 = ap_const_lv2_2) else "0";
    i_1_fu_273_p2 <= std_logic_vector(unsigned(i2_reg_133) + unsigned(ap_const_lv2_1));
    i_fu_225_p2 <= std_logic_vector(unsigned(i1_reg_102) + unsigned(ap_const_lv2_1));
    in_shift_V_fu_344_p1 <= storemerge_in_fu_336_p3(31 - 1 downto 0);
    isNeg_fu_298_p3 <= sh_assign_fu_283_p3(31 downto 31);
    out_bits_0_V_1_fu_235_p3 <= 
        p_Result_s_reg_427 when (tmp_28_fu_231_p1(0) = '1') else 
        out_bits_0_V_reg_422;
    out_bits_0_V_fu_183_p5 <= (tmp_fu_175_p3 & ap_const_lv32_0(14 downto 0));
    out_exp_V_fu_389_p3 <= 
        ap_const_lv8_0 when (tmp_17_fu_365_p2(0) = '1') else 
        phitmp_fu_383_p2;
    p_Result_1_fu_165_p4 <= in_V(30 downto 15);
    p_Result_22_fu_397_p4 <= ((ap_const_lv1_0 & out_exp_V_fu_389_p3) & p_Val2_s_fu_355_p4);
    p_Result_s_fu_207_p5 <= (tmp_2_fu_199_p3 & ap_const_lv32_0(15 downto 0));

    -- p_Val2_in_phi_fu_147_p4 assign process. --
    p_Val2_in_phi_fu_147_p4_assign_proc : process(ap_CS_fsm, tmp_27_fu_265_p3, in_shift_V_fu_344_p1, in_shift_reg_113, ap_sig_bdd_80)
    begin
        if ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then
            if (ap_sig_bdd_80) then 
                p_Val2_in_phi_fu_147_p4 <= in_shift_V_fu_344_p1;
            elsif (not((ap_const_lv1_0 = tmp_27_fu_265_p3))) then 
                p_Val2_in_phi_fu_147_p4 <= in_shift_reg_113;
            else 
                p_Val2_in_phi_fu_147_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            p_Val2_in_phi_fu_147_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    p_Val2_s_fu_355_p4 <= p_Val2_in_phi_fu_147_p4(29 downto 7);
    phitmp_fu_383_p2 <= std_logic_vector(unsigned(tmp_18_fu_373_p2) - unsigned(tmp_33_fu_379_p1));
    result_write_assign_fu_407_p1 <= p_Result_22_fu_397_p4;
    sh_assign_1_fu_312_p3 <= 
        tmp_13_fu_306_p2 when (isNeg_fu_298_p3(0) = '1') else 
        sh_assign_fu_283_p3;
    sh_assign_fu_283_p3 <= 
        c_1_s_reg_90 when (tmp_29_fu_279_p1(0) = '1') else 
        c_0_s_reg_78;

    -- shift_1_phi_fu_157_p4 assign process. --
    shift_1_phi_fu_157_p4_assign_proc : process(ap_CS_fsm, shift_2_fu_291_p2, tmp_27_fu_265_p3, shift_reg_122, ap_sig_bdd_80)
    begin
        if ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then
            if (ap_sig_bdd_80) then 
                shift_1_phi_fu_157_p4 <= shift_2_fu_291_p2;
            elsif (not((ap_const_lv1_0 = tmp_27_fu_265_p3))) then 
                shift_1_phi_fu_157_p4 <= shift_reg_122;
            else 
                shift_1_phi_fu_157_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            shift_1_phi_fu_157_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    shift_2_fu_291_p2 <= std_logic_vector(unsigned(sh_assign_fu_283_p3) + unsigned(shift_reg_122));
    storemerge_in_fu_336_p3 <= 
        tmp_14_fu_324_p2 when (isNeg_fu_298_p3(0) = '1') else 
        tmp_15_fu_330_p2;
    tmp_13_fu_306_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(sh_assign_fu_283_p3));
    tmp_14_fu_324_p0 <= tmp_s_fu_320_p1;
    tmp_14_fu_324_p2 <= std_logic_vector(shift_right(signed(tmp_14_fu_324_p0),to_integer(unsigned('0' & sh_assign_1_fu_312_p3(31-1 downto 0)))));
    tmp_15_fu_330_p0 <= tmp_s_fu_320_p1;
    tmp_15_fu_330_p2 <= std_logic_vector(shift_left(unsigned(tmp_15_fu_330_p0),to_integer(unsigned('0' & sh_assign_1_fu_312_p3(31-1 downto 0)))));
    tmp_16_fu_349_p2 <= "1" when (sh_assign_fu_283_p3 = ap_const_lv32_10) else "0";
    tmp_17_fu_365_p2 <= "1" when (in_V = ap_const_lv31_0) else "0";
    tmp_18_fu_373_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_32_fu_370_p1));
    tmp_26_fu_195_p1 <= in_V(15 - 1 downto 0);
    tmp_27_fu_265_p3 <= i2_reg_133(1 downto 1);
    tmp_28_fu_231_p1 <= i1_reg_102(1 - 1 downto 0);
    tmp_29_fu_279_p1 <= i2_reg_133(1 - 1 downto 0);
    tmp_2_fu_199_p3 <= (tmp_26_fu_195_p1 & ap_const_lv1_1);
    tmp_32_fu_370_p1 <= prescale(8 - 1 downto 0);
    tmp_33_fu_379_p1 <= shift_1_phi_fu_157_p4(8 - 1 downto 0);
    tmp_fu_175_p3 <= (p_Result_1_fu_165_p4 & ap_const_lv1_1);
    
    in_shift_reg_113_temp <= signed(in_shift_reg_113);
    tmp_s_fu_320_p1 <= std_logic_vector(resize(in_shift_reg_113_temp,32));

end behav;
