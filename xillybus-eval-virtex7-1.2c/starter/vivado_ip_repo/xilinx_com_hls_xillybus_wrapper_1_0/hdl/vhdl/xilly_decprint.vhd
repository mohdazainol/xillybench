-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.4
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity xilly_decprint is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    val_r : IN STD_LOGIC_VECTOR (31 downto 0);
    debug_ready : IN STD_LOGIC_VECTOR (7 downto 0);
    debug_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    debug_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of xilly_decprint is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal powers10_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal powers10_ce0 : STD_LOGIC;
    signal powers10_q0 : STD_LOGIC_VECTOR (27 downto 0);
    signal first_2_cast1_fu_144_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal first_2_cast1_reg_304 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_154_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_313 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_160_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_reg_318 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_148_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal powers10_addr_reg_323 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_165_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_reg_328 : STD_LOGIC_VECTOR (4 downto 0);
    signal powers10_load_cast_fu_173_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal powers10_load_cast_reg_333 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_load_reg_338 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_1_fu_185_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_1_reg_346 : STD_LOGIC_VECTOR (7 downto 0);
    signal first_1_fu_233_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_rec_i_fu_272_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_rec_i_reg_361 : STD_LOGIC_VECTOR (63 downto 0);
    signal out_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_load_reg_366 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_ce0 : STD_LOGIC;
    signal out_we0 : STD_LOGIC;
    signal out_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal first_reg_93 : STD_LOGIC_VECTOR (31 downto 0);
    signal first_2_reg_105 : STD_LOGIC_VECTOR (3 downto 0);
    signal x_reg_116 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_0_rec_i_reg_127 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_288_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_i_cast_fu_267_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal v_fu_40 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_1_fu_248_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_205_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal powers10_load_cast_fu_173_p0 : STD_LOGIC_VECTOR (29 downto 0);
    signal powers10_q0_temp: signed (28-1 downto 0);
    signal tmp_fu_191_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_9_fu_201_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal powers10_load_1_cast_fu_244_p0 : STD_LOGIC_VECTOR (29 downto 0);
    signal powers10_load_1_cast_fu_244_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_258_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum_i_fu_262_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp1_i_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);

    component xilly_decprint_powers10 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component xilly_decprint_out IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    powers10_U : component xilly_decprint_powers10
    generic map (
        DataWidth => 28,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => powers10_address0,
        ce0 => powers10_ce0,
        q0 => powers10_q0);

    out_U : component xilly_decprint_out
    generic map (
        DataWidth => 8,
        AddressRange => 11,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => out_address0,
        ce0 => out_ce0,
        we0 => out_we0,
        d0 => out_d0,
        q0 => out_q0);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- first_2_reg_105 assign process. --
    first_2_reg_105_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st4_fsm_3 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_4_fu_180_p2)))) then 
                first_2_reg_105 <= i_reg_313;
            elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then 
                first_2_reg_105 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- first_reg_93 assign process. --
    first_reg_93_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st4_fsm_3 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_4_fu_180_p2)))) then 
                first_reg_93 <= first_1_fu_233_p3;
            elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then 
                first_reg_93 <= ap_const_lv32_9;
            end if; 
        end if;
    end process;

    -- p_0_rec_i_reg_127 assign process. --
    p_0_rec_i_reg_127_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st8_fsm_7 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_8_fu_288_p1)))) then 
                p_0_rec_i_reg_127 <= p_rec_i_reg_361;
            elsif (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((exitcond_fu_148_p2 = ap_const_lv1_0)))) then 
                p_0_rec_i_reg_127 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    -- v_fu_40 assign process. --
    v_fu_40_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st5_fsm_4 = ap_CS_fsm)) then 
                v_fu_40 <= v_1_fu_248_p2;
            elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then 
                v_fu_40 <= val_r;
            end if; 
        end if;
    end process;

    -- x_reg_116 assign process. --
    x_reg_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
                x_reg_116 <= ap_const_lv8_0;
            elsif ((ap_ST_st5_fsm_4 = ap_CS_fsm)) then 
                x_reg_116 <= x_1_reg_346;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then
                first_2_cast1_reg_304(0) <= first_2_cast1_fu_144_p1(0);
    first_2_cast1_reg_304(1) <= first_2_cast1_fu_144_p1(1);
    first_2_cast1_reg_304(2) <= first_2_cast1_fu_144_p1(2);
    first_2_cast1_reg_304(3) <= first_2_cast1_fu_144_p1(3);
                i_reg_313 <= i_fu_154_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st7_fsm_6 = ap_CS_fsm)) then
                out_load_reg_366 <= out_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then
                p_rec_i_reg_361 <= p_rec_i_fu_272_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (exitcond_fu_148_p2 = ap_const_lv1_0))) then
                powers10_addr_reg_323 <= tmp_3_fu_160_p1(4 - 1 downto 0);
                tmp_3_reg_318(0) <= tmp_3_fu_160_p1(0);
    tmp_3_reg_318(1) <= tmp_3_fu_160_p1(1);
    tmp_3_reg_318(2) <= tmp_3_fu_160_p1(2);
    tmp_3_reg_318(3) <= tmp_3_fu_160_p1(3);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then
                powers10_load_cast_reg_333(0) <= powers10_load_cast_fu_173_p1(0);
    powers10_load_cast_reg_333(1) <= powers10_load_cast_fu_173_p1(1);
    powers10_load_cast_reg_333(2) <= powers10_load_cast_fu_173_p1(2);
    powers10_load_cast_reg_333(3) <= powers10_load_cast_fu_173_p1(3);
    powers10_load_cast_reg_333(4) <= powers10_load_cast_fu_173_p1(4);
    powers10_load_cast_reg_333(5) <= powers10_load_cast_fu_173_p1(5);
    powers10_load_cast_reg_333(6) <= powers10_load_cast_fu_173_p1(6);
    powers10_load_cast_reg_333(7) <= powers10_load_cast_fu_173_p1(7);
    powers10_load_cast_reg_333(8) <= powers10_load_cast_fu_173_p1(8);
    powers10_load_cast_reg_333(9) <= powers10_load_cast_fu_173_p1(9);
    powers10_load_cast_reg_333(10) <= powers10_load_cast_fu_173_p1(10);
    powers10_load_cast_reg_333(11) <= powers10_load_cast_fu_173_p1(11);
    powers10_load_cast_reg_333(12) <= powers10_load_cast_fu_173_p1(12);
    powers10_load_cast_reg_333(13) <= powers10_load_cast_fu_173_p1(13);
    powers10_load_cast_reg_333(14) <= powers10_load_cast_fu_173_p1(14);
    powers10_load_cast_reg_333(15) <= powers10_load_cast_fu_173_p1(15);
    powers10_load_cast_reg_333(16) <= powers10_load_cast_fu_173_p1(16);
    powers10_load_cast_reg_333(17) <= powers10_load_cast_fu_173_p1(17);
    powers10_load_cast_reg_333(18) <= powers10_load_cast_fu_173_p1(18);
    powers10_load_cast_reg_333(19) <= powers10_load_cast_fu_173_p1(19);
    powers10_load_cast_reg_333(20) <= powers10_load_cast_fu_173_p1(20);
    powers10_load_cast_reg_333(21) <= powers10_load_cast_fu_173_p1(21);
    powers10_load_cast_reg_333(22) <= powers10_load_cast_fu_173_p1(22);
    powers10_load_cast_reg_333(23) <= powers10_load_cast_fu_173_p1(23);
    powers10_load_cast_reg_333(24) <= powers10_load_cast_fu_173_p1(24);
    powers10_load_cast_reg_333(25) <= powers10_load_cast_fu_173_p1(25);
    powers10_load_cast_reg_333(26) <= powers10_load_cast_fu_173_p1(26);
    powers10_load_cast_reg_333(27) <= powers10_load_cast_fu_173_p1(27);
    powers10_load_cast_reg_333(28) <= powers10_load_cast_fu_173_p1(28);
    powers10_load_cast_reg_333(29) <= powers10_load_cast_fu_173_p1(29);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((exitcond_fu_148_p2 = ap_const_lv1_0)))) then
                tmp_1_reg_328 <= tmp_1_fu_165_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then
                v_load_reg_338 <= v_fu_40;
                x_1_reg_346 <= x_1_fu_185_p2;
            end if;
        end if;
    end process;
    first_2_cast1_reg_304(31 downto 4) <= "0000000000000000000000000000";
    tmp_3_reg_318(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    powers10_load_cast_reg_333(31 downto 30) <= "00";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start , ap_CS_fsm , exitcond_fu_148_p2 , tmp_4_fu_180_p2 , tmp_8_fu_288_p1 , tmp1_i_fu_278_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond_fu_148_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                if (not((ap_const_lv1_0 = tmp_4_fu_180_p2))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                if (not((ap_const_lv1_0 = tmp1_i_fu_278_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                end if;
            when ap_ST_st8_fsm_7 => 
                if (not((ap_const_lv1_0 = tmp_8_fu_288_p1))) then
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_CS_fsm, tmp1_i_fu_278_p2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm)) or ((ap_ST_st7_fsm_6 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp1_i_fu_278_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm, tmp1_i_fu_278_p2)
    begin
        if (((ap_ST_st7_fsm_6 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp1_i_fu_278_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    debug_out <= out_load_reg_366;

    -- debug_out_ap_vld assign process. --
    debug_out_ap_vld_assign_proc : process(ap_CS_fsm, tmp_8_fu_288_p1)
    begin
        if (((ap_ST_st8_fsm_7 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_8_fu_288_p1)))) then 
            debug_out_ap_vld <= ap_const_logic_1;
        else 
            debug_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_148_p2 <= "1" when (first_2_reg_105 = ap_const_lv4_A) else "0";
    first_1_fu_233_p3 <= 
        first_2_cast1_reg_304 when (or_cond_fu_227_p2(0) = '1') else 
        first_reg_93;
    first_2_cast1_fu_144_p1 <= std_logic_vector(resize(unsigned(first_2_reg_105),32));
    i_fu_154_p2 <= std_logic_vector(unsigned(first_2_reg_105) + unsigned(ap_const_lv4_1));
    or_cond_fu_227_p2 <= (tmp_6_fu_216_p2 and tmp_7_fu_222_p2);

    -- out_address0 assign process. --
    out_address0_assign_proc : process(ap_CS_fsm, tmp_3_reg_318, sum_i_cast_fu_267_p1)
    begin
        if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            out_address0 <= tmp_3_reg_318(4 - 1 downto 0);
        elsif ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            out_address0 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then 
            out_address0 <= sum_i_cast_fu_267_p1(4 - 1 downto 0);
        else 
            out_address0 <= "XXXX";
        end if; 
    end process;


    -- out_ce0 assign process. --
    out_ce0_assign_proc : process(ap_CS_fsm)
    begin
        if (((ap_ST_st2_fsm_1 = ap_CS_fsm) or (ap_ST_st4_fsm_3 = ap_CS_fsm) or (ap_ST_st6_fsm_5 = ap_CS_fsm))) then 
            out_ce0 <= ap_const_logic_1;
        else 
            out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- out_d0 assign process. --
    out_d0_assign_proc : process(ap_CS_fsm, tmp_5_fu_205_p4)
    begin
        if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            out_d0 <= tmp_5_fu_205_p4;
        elsif ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            out_d0 <= ap_const_lv8_0;
        else 
            out_d0 <= "XXXXXXXX";
        end if; 
    end process;


    -- out_we0 assign process. --
    out_we0_assign_proc : process(ap_CS_fsm, exitcond_fu_148_p2, tmp_4_fu_180_p2)
    begin
        if ((((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((exitcond_fu_148_p2 = ap_const_lv1_0))) or ((ap_ST_st4_fsm_3 = ap_CS_fsm) and not((ap_const_lv1_0 = tmp_4_fu_180_p2))))) then 
            out_we0 <= ap_const_logic_1;
        else 
            out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_rec_i_fu_272_p2 <= std_logic_vector(unsigned(p_0_rec_i_reg_127) + unsigned(ap_const_lv64_1));

    -- powers10_address0 assign process. --
    powers10_address0_assign_proc : process(ap_CS_fsm, tmp_3_fu_160_p1, powers10_addr_reg_323)
    begin
        if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            powers10_address0 <= powers10_addr_reg_323;
        elsif ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            powers10_address0 <= tmp_3_fu_160_p1(4 - 1 downto 0);
        else 
            powers10_address0 <= "XXXX";
        end if; 
    end process;


    -- powers10_ce0 assign process. --
    powers10_ce0_assign_proc : process(ap_CS_fsm)
    begin
        if (((ap_ST_st2_fsm_1 = ap_CS_fsm) or (ap_ST_st4_fsm_3 = ap_CS_fsm))) then 
            powers10_ce0 <= ap_const_logic_1;
        else 
            powers10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    
    powers10_q0_temp <= signed(powers10_q0);
    powers10_load_1_cast_fu_244_p0 <= std_logic_vector(resize(powers10_q0_temp,30));

    powers10_load_1_cast_fu_244_p1 <= std_logic_vector(resize(unsigned(powers10_load_1_cast_fu_244_p0),32));
    
    powers10_q0_temp <= signed(powers10_q0);
    powers10_load_cast_fu_173_p0 <= std_logic_vector(resize(powers10_q0_temp,30));

    powers10_load_cast_fu_173_p1 <= std_logic_vector(resize(unsigned(powers10_load_cast_fu_173_p0),32));
    sum_i_cast_fu_267_p1 <= std_logic_vector(resize(unsigned(sum_i_fu_262_p2),64));
    sum_i_fu_262_p2 <= std_logic_vector(unsigned(tmp_2_fu_258_p1) + unsigned(tmp_1_reg_328));
    tmp1_i_fu_278_p2 <= "1" when (out_q0 = ap_const_lv8_0) else "0";
    tmp_1_fu_165_p1 <= first_reg_93(5 - 1 downto 0);
    tmp_2_fu_258_p1 <= p_0_rec_i_reg_127(5 - 1 downto 0);
    tmp_3_fu_160_p1 <= std_logic_vector(resize(unsigned(first_2_reg_105),64));
    tmp_4_fu_180_p2 <= "1" when (unsigned(v_fu_40) < unsigned(powers10_load_cast_reg_333)) else "0";
    tmp_5_fu_205_p4 <= ((tmp_fu_191_p4 & ap_const_lv2_3) & tmp_9_fu_201_p1);
    tmp_6_fu_216_p2 <= "0" when (x_reg_116 = ap_const_lv8_0) else "1";
    tmp_7_fu_222_p2 <= "1" when (signed(first_reg_93) > signed(first_2_cast1_reg_304)) else "0";
    tmp_8_fu_288_p1 <= debug_ready(1 - 1 downto 0);
    tmp_9_fu_201_p1 <= x_reg_116(4 - 1 downto 0);
    tmp_fu_191_p4 <= x_reg_116(7 downto 6);
    v_1_fu_248_p2 <= std_logic_vector(unsigned(v_load_reg_338) - unsigned(powers10_load_1_cast_fu_244_p1));
    x_1_fu_185_p2 <= std_logic_vector(unsigned(x_reg_116) + unsigned(ap_const_lv8_1));
end behav;
